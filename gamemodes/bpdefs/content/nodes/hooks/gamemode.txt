HOOKS GM
{
	HOOK AcceptInput, SERVER
	{
		DESC Called when a map I/O event occurs.
		OUT ent, PN_Ref, PNF_None, Entity, #Entity that receives the input
		OUT input, PN_String, #The input name. Not guaranteed to be a valid input on the entity.
		OUT activator, PN_Ref, PNF_None, Entity, #Activator of the input
		OUT caller, PN_Ref, PNF_None, Entity, #Caller of the input
		OUT value, PN_Any, PNF_None, #Data provided with the input
		IN override, PN_Bool, #Return true to prevent this input from being processed.
	}
	HOOK AdjustMouseSensitivity, CLIENT
	{
		DESC Allows you to adjust the mouse sensitivity.
		OUT defaultSensitivity, PN_Number, #The old sensitivity. In general it will be 0, which is equivalent to a sensitivity of 1.
		IN newSensitivity=-1, PN_Number, #A fraction of the normal sensitivity (0.5 would be half as sensitive), return -1 to not override.
	}
	HOOK AllowPlayerPickup, SERVER
	{
		DESC Called when a player tries to pick up something using the "use" key, return to override.
		OUT player, PN_Ref, PNF_None, Player, #The player trying to pick up something.
		OUT entity, PN_Ref, PNF_None, Entity, #The Entity the player attempted to pick up.
		IN allow=true, PN_Bool, #Allow the player to pick up the entity or not.
	}
	HOOK CalcMainActivity, SHARED
	{
		DESC This hook is used to calculate animations for a player.
		OUT player, PN_Ref, PNF_None, Player, #The player to apply the animation.
		OUT velocity, PN_Vector, #The velocity of the player.
		IN act, PN_Enum, PNF_None, ACT, #The activity the player should use.
		IN sequence, PN_Number, PNF_Nullable, #Sequence for the player to use. This takes precedence over the activity
	}
	HOOK CalcVehicleView, CLIENT
	{
		DESC Called from GM:CalcView when player is in driving a vehicle.
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #The vehicle the player is driving
		OUT player, PN_Ref, PNF_None, Player, #The vehicle driver
		OUT view, PN_Struct, PNF_None, CamData, #The view data containing players FOV, view position and angles
		IN view, PN_Struct, PNF_None, CamData, #The modified view table containing new values
	}
	HOOK CalcView, CLIENT
	{
		DESC Allows override of the default view.
		OUT player, PN_Ref, PNF_None, Player, #The local player.
		OUT origin, PN_Vector, #The player's view position.
		OUT angles, PN_Angles, #The player's view angles.
		OUT fov, PN_Number, #Field of view.
		OUT znear, PN_Number, #Distance to near clipping plane.
		OUT zfar, PN_Number, #Distance to far clipping plane.
		IN result, PN_Struct, PNF_None, CamData, #View data table.
	}
	HOOK CalcViewModelView, CLIENT
	{
		DESC Allows overriding the position and angle of the viewmodel.
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon entity.
		OUT viewModel, PN_Ref, PNF_None, Entity, #The weapon entity.
		OUT oldPos, PN_Vector, #Original position (before viewmodel bobbing and swaying)
		OUT oldAngle, PN_Angles, #Original angle (before viewmodel bobbing and swaying)
		OUT pos, PN_Vector, #Current position
		OUT angle, PN_Angles, #Current angle
		IN newPos, PN_Vector, #New position
		IN newAngle, PN_Angles, #New position
	}
	HOOK CanExitVehicle, SERVER
	{
		DESC Determines if the player can exit the vehicle.
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #The vehicle entity.
		OUT player, PN_Ref, PNF_None, Player, #The player.
		IN canExit, PN_Bool, #True if the player can exit the vehicle.
	}
	HOOK CanPlayerEnterVehicle, SERVER
	{
		DESC Determines whether or not the player can enter the vehicle.
		OUT player, PN_Ref, PNF_None, Player, #The player.
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #The vehicle.
		OUT role, PN_Number, #The role.
		IN canEnter, PN_Bool, #False if the player is not allowed to enter the vehicle.
	}
	HOOK CanPlayerSuicide, SERVER
	{
		DESC Determines if the player can kill themselves using the concommands "kill" or "explode".
		OUT player, PN_Ref, PNF_None, Player, #The player.
		IN canSuicide, PN_Bool, #True if they can suicide.
	}
	HOOK CanPlayerUnfreeze, SERVER
	{
		DESC Determines if the player can unfreeze the entity.
		OUT player, PN_Ref, PNF_None, Player, #The player.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity.
		OUT phys, PN_Ref, PNF_None, PhysObj, #The physics object of the entity.
		IN canUnfreeze, PN_Bool, #True if they can unfreeze.
	}
	HOOK ChatText, CLIENT
	{
		DESC Called when a message is printed to the chat box. Note, that this isn't working with player messages even though there are arguments for it.
		OUT index, PN_Number, #The index of the player.
		OUT name, PN_String, #The name of the player.
		OUT text, PN_String, #The text that is being sent.
		OUT type, PN_String, #Chat filter type.
		IN suppress=false, PN_Bool, #Return true to suppress the chat message
	}
	HOOK ChatTextChanged, CLIENT
	{
		DESC Called whenever the content of the user's chat input box is changed.
		OUT text, PN_String, #The new contents of the input box
	}
	HOOK CreateClientsideRagdoll, CLIENT
	{
		DESC Called whenever an entity becomes a clientside ragdoll.
		OUT entity, PN_Ref, PNF_None, Entity, #The Entity that created the ragdoll
		OUT ragdoll, PN_Ref, PNF_None, Entity, #The ragdoll being created.
	}
	HOOK CreateEntityRagdoll, SERVER
	{
		DESC Called when a serverside ragdoll of an entity has been created.
		OUT entity, PN_Ref, PNF_None, Entity, #Entity that owns the ragdoll
		OUT ragdoll, PN_Ref, PNF_None, Entity, #The ragdoll entity
	}
	HOOK CreateMove, CLIENT
	{
		DESC Allows you to change the players movements before they're sent to the server.
		OUT cmd, PN_Ref, PNF_None, CUserCmd, #The User Command data
		IN disableDefaultMovement, PN_Bool, #Return true to: Disable Sandbox C menu "screen clicking", Disable Teammate nocollide (verification required), Prevent calling of C_BaseHLPlayer::CreateMove & subsequently C_BasePlayer::CreateMove
	}
	HOOK DoPlayerDeath, SERVER
	{
		DESC Handles the player's death.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT attacker, PN_Ref, PNF_None, Entity, #The entity that killed the player
		OUT damage, PN_Ref, PNF_None, CTakeDamageInfo, #Damage info
	}
	HOOK DrawDeathNotice, CLIENT
	{
		DESC This hook is called every frame to draw all of the current death notices.
		OUT x, PN_Number, #X position to draw death notices as a ratio
		OUT y, PN_Number, #Y position to draw death notices as a ratio
	}
	HOOK DrawPhysgunBeam, CLIENT
	{
		DESC Allows you to override physgun beam drawing.
		OUT player, PN_Ref, PNF_None, Player, #Physgun owner
		OUT physgun, PN_Ref, PNF_None, Weapon, #The physgun
		OUT enabled, PN_Bool, #Is the beam enabled
		OUT target, PN_Ref, PNF_None, Entity, #Entity we are grabbing. This will be NULL if nothing is being held
		OUT physBone, PN_Number, #ID of the physics bone (PhysObj) we are grabbing at.
		OUT hitPos, PN_Vector, #Beam hit position relative to the physics bone we are grabbing.
		IN defaultBeam=true, PN_Bool, #Return false to hide default beam
	}
	HOOK EntityEmitSound, SHARED
	{
		OUT data, PN_Struct, PNF_None, EmitSoundInfo, #Information about the played sound. Changes done to this table can be applied by returning true from this hook.
		IN playSound=true, PN_Bool
	}
	HOOK EntityFireBullets, SHARED
	{
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that fired the bullet
		OUT data, PN_Struct, PNF_None, Bullet, #The bullet data
		IN fireBullet=true, PN_Bool
	}
	HOOK EntityRemoved, SHARED
	{
		OUT entity, PN_Ref, PNF_None, Entity, #Entity being removed
	}
	HOOK EntityTakeDamage, SERVER
	{
		OUT target, PN_Ref, PNF_None, Entity, #The entity taking damage
		OUT damage, PN_Ref, PNF_None, CTakeDamageInfo, #Damage info
		IN blockDamage=false, PN_Bool, #Block damage
	}
	HOOK FinishChat, CLIENT
	{
		DESC Runs when user cancels/finishes typing.
	}
	HOOK FinishMove, SHARED
	{
		DESC Called after GM:Move, applies all the changes from the CMoveData to the player.
		OUT player, PN_Ref, PNF_None, Player, #Player
		OUT move, PN_Ref, PNF_None, CMoveData, #Movement data
		IN override, PN_Bool, #Return true to suppress default engine action
	}
	HOOK GetFallDamage, SERVER
	{
		DESC Called when a player takes damage from falling, allows to override the damage.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT speed, PN_Number, #The fall speed
		IN damage, PN_Number, #New fall damage
	}
	HOOK GetMotionBlurValues, CLIENT
	{
		DESC Allows you to modify the Source Engine's motion blur shaders.
		OUT horizontal, PN_Number, The amount of horizontal blur.
		OUT vertical, PN_Number, The amount of vertical blur.
		OUT forward, PN_Number, The amount of forward/radial blur.
		OUT rotational, PN_Number, The amount of rotational blur.
		IN horizontal, PN_Number, New amount of horizontal blur.
		IN vertical, PN_Number, New amount of vertical blur.
		IN forward, PN_Number, New amount of forward/radial blur.
		IN rotational, PN_Number, New amount of rotational blur.
	}
	HOOK GetTeamColor, CLIENT
	{
		DESC Returns the color for the given entity's team. This is used in chat and deathnotice text.
		OUT entity, PN_Ref, PNF_None, Entity, #Entity
		IN color, PN_Color, PNF_None, #Team Color
	}
	HOOK GetNumTeamColor, CLIENT
	{
		DESC Returns the team color for the given team index.
		OUT team, PN_Number, #Team index
		IN color, PN_Color, PNF_None, #Team Color
	}
	HOOK GravGunDropped, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who is wielding the gravity gun
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that has been dropped
	}
	HOOK GravGunOnPickedUp, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who is wielding the gravity gun
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that has been picked up by the gravity gun
	}
	HOOK GravGunPickupAllowed, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who is wielding the gravity gun
		OUT entity, PN_Ref, PNF_None, Entity, #The entity the player is attempting to pick up
		IN allow=true, PN_Bool, #Return true to allow entity pick up
	}
	HOOK GravGunPunt, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player wielding the gravity gun
		OUT entity, PN_Ref, PNF_None, Entity, #The entity the player is attempting to punt
		IN allow=true, PN_Bool, #Return true to allow and false to disallow.
	}
	HOOK HUDAmmoPickedUp, CLIENT
	{
		DESC Called when the HOOK has, client picked up ammo. Override to disable default HUD notification.
		OUT itemName, PN_String, #Name of the item (ammo) picked up
		OUT amount, PN_Number, #Amount of the item (ammo) picked up
	}
	HOOK HUDDrawPickupHistory, CLIENT
	{
		DESC Renders the HUD pick-up history. Override to hide default or draw your own HUD.
	}
	HOOK HUDDrawScoreBoard, CLIENT
	{
		DESC Called every frame to render the scoreboard.
	}
	HOOK HUDDrawTargetID, CLIENT
	{
		DESC Called from GM:HUDPaint to draw player info when you hover over a player with your crosshair or mouse.
	}
	HOOK HUDItemPickedUp, CLIENT
	{
		DESC Called when a weapon has been picked up. Override to disable the default HUD notification.
		OUT itemName, PN_String, #Name of the picked up item
	}
	HOOK HUDPaint, CLIENT
	{
		DESC Called whenever the HUD should be drawn. Called right before GM:HUDDrawScoreBoard and after GM:HUDPaintBackground.
	}
	HOOK HUDPaintBackground, CLIENT
	{
		DESC Called before GM:HUDPaint when the HUD background is being drawn.
	}
	HOOK HUDShouldDraw, CLIENT
	{
		DESC Called when the Gamemode is about to draw a given element on the client's HUD (heads-up display).
		OUT name, PN_String, #The name of the HUD element. You can find a full list of HUD elements for this hook here.
		IN draw=true, PN_Bool, #Return false to prevent the given element from being drawn on the client's screen.
	}
	HOOK HUDWeaponPickedUp, CLIENT
	{
		DESC Called when a weapon has been picked up. Override to disable the default HUD notification.
		OUT weapon, PN_Ref, PNF_None, Weapon, #The picked up weapon
	}
	HOOK InputMouseApply, CLIENT
	{
		DESC Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles.
		OUT cmd, PN_Ref, PNF_None, CUserCmd, #User command
		OUT x, PN_Number, #The amount of mouse movement across the X axis this frame
		OUT y, PN_Number, #The amount of mouse movement across the Y axis this frame
		OUT angle, PN_Angles, #The current view angle
		IN modified, PN_Bool, #Return true if we modified something
	}
	HOOK KeyPress, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player pressing the key. If running client-side, this will always be LocalPlayer
		OUT key, PN_Enum, PNF_None, IN, #The key that the player pressed using IN_ Enums.
	}
	HOOK KeyRelease, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player releasing the key. If running client-side, this will always be LocalPlayer
		OUT key, PN_Enum, PNF_None, IN, #The key that the player released using IN_ Enums.
	}
	HOOK Move, SHARED
	{
		DESC The Move hook is called for you to manipulate the player's MoveData. You shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.
		OUT player, PN_Ref, PNF_None, Player, #Player
		OUT move, PN_Ref, PNF_None, CMoveData, #Movement information
		IN override, PN_Bool, #Return true to suppress default engine action
	}
	HOOK NeedsDepthPass, CLIENT
	{
		DESC Returning true in this hook will cause it to render depth buffers defined with render.GetResolvedFullFrameDepth.
		IN renderDepth, PN_Bool, #Render depth buffer
	}
	HOOK NetworkEntityCreated, CLIENT
	{
		DESC Called when an entity has been created over the network.
		OUT entity, PN_Ref, PNF_None, Entity, #Created entity
	}
	HOOK NetworkIDValidated, SERVER
	{
		DESC Called when a player has been validated by Steam.
		OUT name, PN_String, #Player name
		OUT steamID, PN_String, #Player SteamID
	}
	HOOK NotifyShouldTransmit, CLIENT
	{
		DESC Called whenever this entity changes its transmission state for this LocalPlayer, such as exiting or re entering the PVS.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that changed its transmission state.
		OUT shouldTransmit, PN_Bool, #True if we started transmitting to this client and false if we stopped.
	}
	HOOK OnChatTab, CLIENT
	{
		DESC Called when the local player presses TAB while having their chatbox opened.
		OUT text, PN_String, #The currently typed into chatbox text
		IN result, PN_String, #What should be placed into the chatbox instead of what currently is when player presses tab
	}
	HOOK OnDamagedByExplosion, SERVER
	{
		DESC Called when a player has been hurt by an explosion. Override to disable default sound effect.
		OUT player, PN_Ref, PNF_None, Player, #Player who has been hurt
		OUT damage, PN_Ref, PNF_None, CTakeDamageInfo, #Damage info from explsion
	}
	HOOK OnEntityCreated, SHARED
	{
		DESC Called when the entity is created.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity
	}
	HOOK OnNPCKilled, SERVER
	{
		DESC Called whenever an NPC is killed.
		OUT npc, PN_Ref, PNF_None, NPC, #The killed NPC
		OUT attacker, PN_Ref, PNF_None, Entity, #The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC.
		OUT inflictor, PN_Ref, PNF_None, Entity, #Death inflictor. The entity that did the killing. Not necessarily a weapon.
	}
	HOOK OnPhysgunFreeze, SERVER
	{
		DESC Called when a player freezes an entity with the physgun.
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon that was used to freeze the entity.
		OUT physobj, PN_Ref, PNF_None, PhysObj, #Physics object of the entity.
		OUT entity, PN_Ref, PNF_None, Entity, #The target entity.
		OUT player, PN_Ref, PNF_None, Player, #The player who tried to freeze the entity.
		IN allowFreeze, PN_Bool, #Allow player to freeze entity
	}
	HOOK OnPhysgunPickup, SERVER
	{
		DESC
		{
			Called to when a player has successfully picked up an entity with their Physics Gun.
			Not to be confused with GM:PhysgunPickup which is called multiple times to ask if the player should be able to pick up an entity.
		}
		OUT player, PN_Ref, PNF_None, Player, #The player that has picked up something using the physics gun.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that was picked up.
	}
	HOOK OnPhysgunReload, SERVER
	{
		DESC Called when a player reloads with the physgun. Override this to disable default unfreezing behavior.
		OUT physgun, PN_Ref, PNF_None, Weapon, #The physgun in question
		OUT player, PN_Ref, PNF_None, Player, #The player wielding the physgun
		IN allowReload, PN_Bool, #Whether the player can reload with the physgun or not
	}
	HOOK OnPlayerChat, CLIENT
	{
		DESC Called whenever a player sends a chat message. For the serverside equivalent, see GM:PlayerSay.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT text, PN_String, #The message's text
		OUT teamChat, PN_Bool, #Is the player typing in team chat?
		OUT isDead, PN_Bool, #Is the player dead?
		IN suppress=false, PN_Bool, #Should the message be suppressed?
	}
	HOOK OnPlayerHitGround, SHARED
	{
		DESC Called when a player makes contact with the ground.
		OUT player, PN_Ref, PNF_None, Player, #Player
		OUT inWater, PN_Bool, #Did the player land in water?
		OUT onFloater, PN_Bool, #Did the player land on an object floating in the water?
		OUT speed, PN_Number, #The speed at which the player hit the ground
		IN suppress=false, PN_Bool, #Return true to suppress default action
	}
	HOOK OnUndo, CLIENT
	{
		DESC Called when the player undoes something.
		OUT name, PN_String, #The name of the undo action
		OUT customText, PN_String, #The custom text for the undo, set by undo.SetCustomUndoText
	}
	HOOK OnViewModelChanged, SHARED
	{
		DESC Called when the player changes their weapon to another one - and their viewmodel model changes.
		OUT viewModel, PN_Ref, PNF_None, Entity, #The viewmodel that is changing
		OUT oldModel, PN_String, #The old model
		OUT newModel, PN_String, #The new model
	}
	HOOK PhysgunDrop, SHARED
	{
		DESC Called when a player drops an entity with the Physgun.
		OUT player, PN_Ref, PNF_None, Player, #The player who dropped an entitiy
		OUT entity, PN_Ref, PNF_None, Entity, #The dropped entity
	}
	HOOK PhysgunPickup, SHARED
	{
		DESC Called when a player drops an entity with the Physgun.
		OUT player, PN_Ref, PNF_None, Player, #The player that is picking up using the Physics Gun.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity that is being picked up.
		IN allow=true, PN_Bool, #Returns whether the player can pick up the entity or not.
	}
	HOOK PlayerAuthed, SERVER
	{
		DESC Called once when the player is authenticated.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT steamID, PN_String, #The player's SteamID
		OUT uniqueID, PN_String, #The player's UniqueID
	}
	HOOK PlayerButtonDown, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who pressed the button
		OUT button, PN_Enum, PNF_None, BUTTON_CODE, #The button
	}
	HOOK PlayerButtonUp, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who released the button
		OUT button, PN_Enum, PNF_None, BUTTON_CODE, #The button
	}
	HOOK PlayerCanHearPlayersVoice, SERVER
	{
		OUT listener, PN_Ref, PNF_None, Player, #The listening player.
		OUT talker, PN_Ref, PNF_None, Player, #The talking player.
		IN canHear=true, PN_Bool, #Return true if the listener should hear the talker, false if they shouldn't.
		IN spatialize=true, PN_Bool, #3D sound. If set to true, will fade out the sound the further away listener is from the talker, the voice will also be in stereo, and not mono.
	}
	HOOK PlayerCanPickupItem, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player attempting to pick up
		OUT item, PN_Ref, PNF_None, Entity, #The item the player is attempting to pick up
		IN allow=true, PN_Bool, #Allow pick up
	}
	HOOK PlayerCanPickupWeapon, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player attempting to pick up
		OUT weapon, PN_Ref, PNF_None, Weapon, #The item the player is attempting to pick up
		IN allow=true, PN_Bool, #Allow pick up
	}
	HOOK PlayerCanSeePlayersChat, SERVER
	{
		OUT text, PN_String, The chat text
		OUT teamOnly, PN_Bool, If the message is team-only
		OUT listener, PN_Ref, PNF_None, Player, The player receiving the message
		OUT speaker, PN_Ref, PNF_None, Player, The player sending the message
		IN canSee=true, PN_Bool, #Can see other player's chat
	}
	HOOK PlayerConnect, SHARED
	{
		DESC Executes when a player connects to the server. Called before the player has been assigned a UserID and entity.
		OUT name, PN_String, #The player's name.
		OUT ip, PN_String, #The player's IP address. Will be "none" for bots.
	}
	HOOK PlayerDeath, SERVER
	{
		DESC Called when a player is killed by Player:Kill or any other normal means.
		OUT victim, PN_Ref, PNF_None, Player, #The player who died
		OUT inflictor, PN_Ref, PNF_None, Entity, #Item used to kill victim
		OUT attacker, PN_Ref, PNF_None, Entity, #Player or entity that killed the victim
	}
	HOOK PlayerDeathSound, SERVER
	{
		DESC Returns whether or not the default death sound should be muted.
		IN mute=false, PN_Bool, #Mute death sound
	}
	HOOK PlayerDeathThink, SERVER
	{
		DESC Called every think while the player is dead. The return value will determine if the player respawns.
		OUT player, PN_Ref, PNF_None, Player, #The player affected in the hook.
		IN allowSpawn=true, PN_Bool, #Allow spawn
	}
	HOOK PlayerDisconnected, SERVER
	{
		DESC Called when a player leaves the server.
		OUT player, PN_Ref, PNF_None, Player
	}
	HOOK PlayerDriveAnimate, SHARED
	{
		DESC Called to update the player's animation during a drive.
		OUT player, PN_Ref, PNF_None, Player, #The driving player
	}
	HOOK PlayerDroppedWeapon, SERVER
	{
		DESC Called when a weapon is dropped by a player via Player:DropWeapon.
		OUT player, PN_Ref, PNF_None, Player, #The player who owned this weapon before it was dropped
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon that was dropped
	}
	HOOK PlayerEndVoice, CLIENT
	{
		DESC Called when player stops using voice chat.
		OUT player, PN_Ref, PNF_None, Player, #Player who stopped talking
	}
	HOOK PlayerEnteredVehicle, SERVER
	{
		DESC Called when a player enters a vehicle.
		OUT player, PN_Ref, PNF_None, Player, #Player who entered vehicle
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #Vehicle the player entered
		OUT role, PN_Number
	}
	HOOK PlayerFootstep, SHARED
	{
		DESC Called whenever a player steps. Return true to mute the normal sound.
		OUT player, PN_Ref, PNF_None, Player, #The stepping player
		OUT pos, PN_Vector, #The position of the step
		OUT foot, PN_Number, #Foot that is stepped. 0 for left, 1 for right
		OUT sound, PN_String, #Sound that is going to play
		OUT volume, PN_Number, #Volume of the footstep
		OUT filter, PN_Ref, PNF_None, CRecipientFilter, #The Recipient filter of players who can hear the footstep
		IN muteSound=false, PN_Bool, #Prevent default step sound
	}
	HOOK PlayerFrozeObject, SERVER
	{
		DESC Called when a player freezes an object.
		OUT player, PN_Ref, PNF_None, Player, #Player who has frozen an object
		OUT entity, PN_Ref, PNF_None, Entity, #The frozen object
		OUT physObj, PN_Ref, PNF_None, PhysObj, #The frozen physics object of the frozen entity ( For ragdolls )
	}
	HOOK PlayerHurt, SERVER
	{
		DESC Called when a player gets hurt.
		OUT victim, PN_Ref, PNF_None, Player, #Victim
		OUT attacker, PN_Ref, PNF_None, Entity, #Attacker Entity
		OUT healthRemaining, PN_Number, #Remaining Health
		OUT damageTaken, PN_Number, #Damage Taken
	}
	HOOK PlayerInitialSpawn, SERVER
	{
		DESC Called when the player spawns for the first time.
		OUT player, PN_Ref, PNF_None, Player, #The player who spawned.
		OUT transition, PN_Bool, #If true, the player just spawned from a map transition.
	}
	HOOK PlayerLeaveVehicle, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who left a vehicle
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #Vehicle the player left
	}
	HOOK PlayerLoadout, SERVER
	{
		DESC Called to give players the default set of weapons.
		OUT player, PN_Ref, PNF_None, Player, #Player to give weapons to.
		IN preventDefault=true, PN_Bool, #Prevent default loadout
	}
	HOOK PlayerNoClip, SHARED
	{
		DESC Called when a player tries to switch noclip mode.
		OUT player, PN_Ref, PNF_None, Player, #The person who entered/exited noclip
		OUT desiredState, PN_Bool, #Represents the noclip state (on/off) the user will enter if this hook allows them to.
		IN allow=true, PN_Bool, #Return false to disallow the switch.
	}
	HOOK PlayerPostThink, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK PlayerSay, SERVER
	{
		DESC Called when a player dispatched a chat message.
		OUT sender, PN_Ref, PNF_None, Player, #The player which sent the message.
		OUT text, PN_String, #The message's content
		OUT teamChat, PN_Bool, #Is team chat?
		IN replace, PN_String, #What to show instead of original text.
	}
	HOOK PlayerSelectSpawn, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player who needs a spawn point
		OUT transition, PN_Bool, #If true, the player just spawned from a map transition. You probably want to not return an entity for that case to not override player's position.
		IN spawnpoint, PN_Ref, PNF_None, Entity, #The spawnpoint entity to spawn the player at
	}
	HOOK PlayerSelectTeamSpawn, SERVER
	{
		OUT team, PN_Number, #Players team
		OUT player, PN_Ref, PNF_None, Player, #The player
		IN spawnpoint, PN_Ref, PNF_None, Entity, #The entity to use as a spawn point.
	}
	HOOK PlayerSetHandsModel, SERVER
	{
		DESC Called whenever view model hands needs setting a model.
		OUT player, PN_Ref, PNF_None, Player, #The player whose hands needs a model set
		OUT hands, PN_Ref, PNF_None, Entity, #The hands to set model of
	}
	HOOK PlayerSetModel, SERVER
	{
		DESC Called whenever a player spawns and must choose a model. A good place to assign a model to a player.
		OUT player, PN_Ref, PNF_None, Player, #The player being chosen.
	}
	HOOK PlayerShouldTakeDamage, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player.
		OUT attacker, PN_Ref, PNF_None, Entity, #The attacker.
		IN allowDamage=true, PN_Bool
	}
	HOOK PlayerShouldTaunt, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who tried to taunt
		OUT act, PN_Enum, PNF_None, ACT, #Act ID of the taunt player tries to do
		IN allowDamage=true, PN_Bool
	}
	HOOK PlayerSilentDeath, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player who was killed
	}
	HOOK PlayerSpawn, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player who spawned.
		OUT transition, PN_Bool, #If true, the player just spawned from a map transition. You probably want to not touch player's weapons if this is set to true from this hook.
	}
	HOOK PlayerSpray, SERVER
	{
		DESC Determines if the player can spray using the "impulse 201" console command.
		OUT player, PN_Ref, PNF_None, Player, #The player
		IN disable=false, PN_Bool, #Return false to allow spraying, return true to prevent spraying.
	}
	HOOK PlayerStartTaunt, SERVER
	{
		DESC Called when player starts taunting.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT act, PN_Enum, PNF_None, ACT, #The sequence ID of the taunt
		OUT length, PN_Number, #Length of the taunt
	}
	HOOK PlayerStartVoice, CLIENT
	{
		DESC Called when a player starts using voice chat.
		OUT player, PN_Ref, PNF_None, Player, #Player who started using voice chat
	}
	HOOK PlayerStepSoundTime, SHARED
	{
		DESC Allows you to override the time between footsteps.
		OUT player, PN_Ref, PNF_None, Player, #Player who is walking
		OUT type, PN_Enum, PNF_None, STEPSOUNDTIME, #The type of footsteps
		OUT walking, PN_Bool, #Is the player walking or not
		IN time, PN_Number, #Time between footsteps, in ms
	}
	HOOK PlayerSwitchFlashlight, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player who attempts to change their flashlight state.
		OUT enabled, PN_Bool, #The new state the player requested, true for on, false for off.
		IN allow=true, PN_Bool, #Can toggle the flashlight or not
	}
	HOOK PlayerSwitchWeapon, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player switching weapons.
		OUT oldWeapon, PN_Ref, PNF_None, Weapon, #The previous weapon. Will be NULL if the previous weapon was removed or the player is switching from nothing.
		OUT newWeapon, PN_Ref, PNF_None, Weapon, #The weapon the player switched to. Will be NULL if the player is switching to nothing.
		IN suppress=false, PN_Bool, #Return true to prevent weapon switch
	}
	HOOK PlayerTick, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT moveData, PN_Ref, PNF_None, CMoveData, #The current movedata for the player.
	}
	HOOK PlayerTraceAttack, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #The player that has been hit
		OUT damage, PN_Ref, PNF_None, CTakeDamageInfo, #The damage info of the bullet
		OUT dir, PN_Vector, #Normalized vector direction of the bullet's path
		OUT trace, PN_Struct, PNF_None, TraceResult, #The trace of the bullet's path
		IN override=false, PN_Bool, #Override engine handling
	}
	HOOK PlayerUnfrozeObject, SERVER
	{
		DESC Called when a player unfreezes an object.
		OUT player, PN_Ref, PNF_None, Player, #Player who has unfrozen an object
		OUT entity, PN_Ref, PNF_None, Entity, #The unfrozen object
		OUT physobj, PN_Ref, PNF_None, PhysObj, #The frozen physics object of the unfrozen entity
	}
	HOOK PlayerUse, SERVER
	{
		OUT player, PN_Ref, PNF_None, Player, #The player pressing the "use" key.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity which the player is looking at / activating USE on.
		IN allowUse=true, PN_Bool, #Return false if the player is not allowed to USE the entity.
	}
	HOOK PostCleanupMap, SHARED
	{
		DESC Called right after the map has cleaned up (usually because game.CleanUpMap was called)
	}
	HOOK PostDraw2DSkyBox, CLIENT
	{
		DESC Called right after the 2D skybox has been drawn - allowing you to draw over it.
	}
	HOOK PostDrawEffects, CLIENT
	{
		DESC Called after rendering effects. This is where halos are drawn. Called just before GM:PreDrawHUD.
	}
	HOOK PostDrawHUD, CLIENT
	{
		DESC Called after GM:PreDrawHUD, GM:HUDPaintBackground and GM:HUDPaint but before GM:DrawOverlay.
	}
	HOOK PostDrawOpaqueRenderables, CLIENT
	{
		DESC Called after drawing opaque entities.
		OUT drawingDepth, PN_Bool, #Whether the current draw is writing depth.
		OUT drawingSkybox, PN_Bool, #Whether the current draw is drawing the skybox.
	}
	HOOK PostDrawPlayerHands, CLIENT
	{
		DESC Called after the player hands are drawn.
		OUT hands, PN_Ref, PNF_None, Entity, #This is the gmod_hands entity.
		OUT viewModel, PN_Ref, PNF_None, Entity, #This is the view model entity.
		OUT player, PN_Ref, PNF_None, Player, #The the owner of the view model.
		OUT weapon, PN_Ref, PNF_None, Weapon, #This is the weapon that is from the view model.
	}
	HOOK PostDrawSkyBox, CLIENT
	{
		DESC Called after drawing the skybox.
	}
	HOOK PostDrawTranslucentRenderables, CLIENT
	{
		DESC Called after all translucent entities are drawn.
		OUT drawingDepth, PN_Bool, #Whether the current draw is writing depth.
		OUT drawingSkybox, PN_Bool, #Whether the current draw is drawing the skybox.		
	}
	HOOK PostDrawViewModel, CLIENT
	{
		DESC Called after view model is drawn.
		OUT viewModel, PN_Ref, PNF_None, Entity, #This is the view model entity.
		OUT player, PN_Ref, PNF_None, Player, #The the owner of the view model.
		OUT weapon, PN_Ref, PNF_None, Weapon, #This is the weapon that is from the view model.
	}
	HOOK PostPlayerDeath, SERVER
	{
		DESC Called right after GM:DoPlayerDeath, GM:PlayerDeath and GM:PlayerSilentDeath.
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK PostPlayerDraw, CLIENT
	{
		DESC Called after the player was drawn.
		OUT player, PN_Ref, PNF_None, Player, #The player that was drawn.
	}
	HOOK PostProcessPermitted, CLIENT
	{
		DESC Allows you to suppress post processing effect drawing.
		OUT effect, PN_String, #The classname of Post Processing effect
		IN allow=true, PN_Bool
	}
	HOOK PostRender, CLIENT
	{
		DESC Called after the frame has been rendered.
	}
	HOOK PreCleanupMap, SHARED
	{
		DESC Called right before the map cleans up (usually because game.CleanUpMap was called).
	}
	HOOK PreDrawEffects, CLIENT
	{
		DESC Called just after GM:PreDrawViewModel and can technically be considered "PostDrawAllViewModels".
	}
	HOOK PreDrawHalos, CLIENT
	{
		DESC Applies a "halo" glow effect to one or multiple entities.
	}
	HOOK PreDrawHUD, CLIENT
	{
		DESC Called before any of 2D drawing functions. Drawing anything in it seems to work incorrectly.
	}
	HOOK PreDrawOpaqueRenderables, CLIENT
	{
		DESC Called before all opaque entities are drawn.
		OUT isDrawingDepth, PN_Bool, #Whether the current draw is writing depth.
		OUT isDrawSkybox, PN_Bool, #Whether the current draw is drawing the skybox.
		IN preventOpaqueRenderables=false, PN_Bool, #Return true to prevent opaque renderables from drawing.
	}
	HOOK PreDrawPlayerHands, CLIENT
	{
		DESC Called before the player hands are drawn.
		OUT hands, PN_Ref, PNF_None, Entity, #This is the gmod_hands entity before it is drawn.
		OUT viewModel, PN_Ref, PNF_None, Entity, #This is the view model entity before it is drawn.
		OUT player, PN_Ref, PNF_None, Player, #The the owner of the view model.
		OUT weapon, PN_Ref, PNF_None, Weapon, #This is the weapon that is from the view model.
		IN preventRender, PN_Bool, #Return true to prevent the viewmodel hands from rendering
	}
	HOOK PreDrawSkyBox, CLIENT
	{
		DESC Called before the sky box is drawn.
		IN disableSkybox, PN_Bool, #Return true to disable skybox drawing (both 2D and 3D skybox)
	}
	HOOK PreDrawTranslucentRenderables, CLIENT
	{
		DESC Called before all the translucent entities are drawn.
		OUT isDrawingDepth, PN_Bool, #Whether the current draw is writing depth.
		OUT isDrawSkybox, PN_Bool, #Whether the current draw is drawing the skybox.
		IN preventRender, PN_Bool, #Return true to prevent translucent renderables from drawing.
	}
	HOOK PreDrawViewModel, CLIENT
	{
		DESC Called before the view model has been drawn. This hook by default also calls this on weapons.
		OUT viewModel, PN_Ref, PNF_None, Entity, #This is the view model entity before it is drawn.
		OUT player, PN_Ref, PNF_None, Player, #The the owner of the view model.
		OUT weapon, PN_Ref, PNF_None, Weapon, #This is the weapon that is from the view model.
		IN preventRender, PN_Bool, #Return true to prevent the default view model rendering.
	}
	HOOK PrePlayerDraw, CLIENT
	{
		DESC Called before the player is drawn.
		OUT player, PN_Ref, PNF_None, Player, #The player that is about to be drawn.
		IN preventRender, PN_Bool, #Prevent default player rendering. Return true to hide the player.
	}
	HOOK PreRender, CLIENT
	{
		DESC Called before the renderer is about to start rendering the next frame.
		IN preventRender, PN_Bool, #Return true to prevent all rendering. This can make the whole game stop rendering anything.
	}
	HOOK PropBreak, SHARED
	{
		DESC Called when a prop has been destroyed.
		OUT attacker, PN_Ref, PNF_None, Player, #The person who broke the prop.
		OUT prop, PN_Ref, PNF_None, Entity, #The entity that has been broken by the attacker.
	}
	HOOK RenderScreenspaceEffects, CLIENT
	{
		DESC Used to render post processing effects.
	}
	HOOK ScaleNPCDamage, SERVER
	{
		DESC Called when an NPC takes damage.
		OUT npc, PN_Ref, PNF_None, NPC, #The NPC that takes damage
		OUT hitgroup, PN_Enum, PNF_None, HITGROUP, #The hitgroup (hitbox) enum where the NPC took damage.
		OUT dmginfo, PN_Ref, PNF_None, CTakeDamageInfo, #Damage info
	}
	HOOK ScalePlayerDamage, SHARED
	{
		DESC This hook allows you to change how much damage a player receives when one takes damage to a specific body part.
		OUT player, PN_Ref, PNF_None, Player, #The NPC that takes damage
		OUT hitgroup, PN_Enum, PNF_None, HITGROUP, #The hitgroup (hitbox) enum where the NPC took damage.
		OUT dmginfo, PN_Ref, PNF_None, CTakeDamageInfo, #Damage info
		IN suppress=false, PN_Bool, #Return true to prevent damage
	}
	HOOK SetupMove, SHARED
	{
		DESC SetupMove is called before the engine process movements. This allows us to override the players movement.
		OUT player, PN_Ref, PNF_None, Player, #The player whose movement we are about to process
		OUT move, PN_Ref, PNF_None, CMoveData, #The move data to override/use
		OUT command, PN_Ref, PNF_None, CUserCmd, #The command data
	}
	HOOK SetupPlayerVisibility, SERVER
	{
		DESC Allows you to add extra positions to the player's PVS. This is the place to call AddOriginToPVS.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT viewEntity, PN_Ref, PNF_None, Entity, #Players Player:GetViewEntity
	}
	HOOK SetupSkyboxFog, CLIENT
	{
		DESC Allows you to use render.Fog* functions to manipulate skybox fog.
		OUT scale, PN_Number, #The scale of 3D skybox
		IN renderedFog=true, PN_Bool, #Return true to tell the engine that fog is set up
	}
	HOOK SetupWorldFog, CLIENT
	{
		DESC Allows you to use render.Fog* functions to manipulate world fog.
		IN renderedFog=true, PN_Bool, #Return true to tell the engine that fog is set up
	}
	HOOK ShouldDrawLocalPlayer, CLIENT
	{
		DESC Called to determine if the LocalPlayer should be drawn.
		OUT player, PN_Ref, PNF_None, Player, #The player
		IN drawPlayer=true, PN_Bool, #True to draw the player, false to hide.
	}
	HOOK ShowHelp, SERVER
	{
		DESC Called when a player executes gm_showhelp console command (F1).
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK ShowSpare1, SERVER
	{
		DESC Called when a player executes gm_showspare1 console command (F3).
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK ShowSpare2, SERVER
	{
		DESC Called when a player executes gm_showspare2 console command (F4).
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK ShowTeam, SERVER
	{
		DESC Called when a player executes gm_showteam console command (F2).
		OUT player, PN_Ref, PNF_None, Player, #The player
	}
	HOOK StartChat, CLIENT
	{
		DESC Runs when the user tries to open the chat box.
		OUT isTeamChat, PN_Bool
		IN suppress, PN_Bool
	}
	HOOK StartCommand, SHARED
	{
		DESC Allows you to change the players inputs before they are processed by the server.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT command, PN_Ref, PNF_None, CUserCmd, #The player
	}
	HOOK Think, SHARED
	{
		DESC Called every frame on HOOK and, client every tick on server.
	}
	HOOK Tick, SHARED
	{
		DESC Called every HOOK tick, server. Serverside, this is similar to GM:Think.
	}
	HOOK TranslateActivity, SHARED
	{
		DESC Allows you to translate player activities.
		OUT player, PN_Ref, PNF_None, Player, #The player
		OUT activity, PN_Enum, PNF_None, ACT, #The activity
		IN newActivity, PN_Enum, PNF_None, ACT, #The new, translated activity
	}
	HOOK UpdateAnimation, SHARED
	{
		DESC Animation updates (pose params etc) should be done here.
		OUT player, PN_Ref, PNF_None, Player, #The player to update the animation info for.
		OUT velocity, PN_Vector, #The player's velocity.
		OUT maxSeqGroundSpeed, PN_Number, #Speed of the animation - used for playback rate scaling.
	}
	HOOK VehicleMove, SHARED
	{
		OUT player, PN_Ref, PNF_None, Player, #Player who is driving the vehicle
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #The vehicle being driven
		OUT moveData, PN_Ref, PNF_None, CMoveData, #Move data
	}
	HOOK WeaponEquip, SERVER
	{
		OUT weapon, PN_Ref, PNF_None, Weapon, #The equipped weapon.
		OUT owner, PN_Ref, PNF_None, Player, #The player that is picking up the weapon.
	}
}
