CLASS Player
{
	FUNC AccountID, SHARED
	{
		DESC Returns the player's AccountID aka SteamID3.
		OUT steamID, PN_Number, #Player's SteamID3 aka AccountID.
	}
	FUNC AddCleanup, SHARED
	{
		DESC  string type
		IN type, PN_String, #Cleanup type
		IN ent, PN_Ref, PNF_None, Entity, #Entity to add
	}
	FUNC AddCount, SHARED
	{
		DESC Adds an entity to the total count of entities of same class. 
		IN str, PN_String, #Entity type
		IN ent, PN_Ref, PNF_None, Entity, #Entity
	}
	FUNC AddDeaths, SERVER
	{
		DESC Add a certain amount to the player's death count
		IN count, PN_Number, #number of deaths to add
	}
	FUNC AddFrags, SERVER
	{
		DESC Add a certain amount to the player's frag count (or kills count)
		IN count, PN_Number, #number of frags to add
	}
	FUNC AddFrozenPhysicsObject, SERVER
	{
		DESC Adds a entity to the players list of frozen objects.
		IN ent, PN_Ref, PNF_None, Entity, #Entity
		IN physobj, PN_Ref, PNF_None, PhysObj, #Physics object belonging to ent
	}
	FUNC AddPlayerOption, CLIENT
	{
		DESC Sets up the voting system for the player. This is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.
		IN name, PN_String, #Name of the vote
		IN timeout, PN_Number, #Time until the vote expires
		IN vote_callback, PN_Ref, PNF_None, function, #The function to be run when the player presses 0-9 while a vote is active.
		IN draw_callback, PN_Ref, PNF_None, function, #Used to draw the vote panel.
	}
	FUNC AddVCDSequenceToGestureSlot, SHARED
	{
		DESC Plays a sequence directly from a sequence number, similar to Player:AnimRestartGesture. This function has the advantage to play sequences that haven't been bound to an existing ACT_ Enums
		IN slot, PN_Enum, PNF_None, GESTURE_SLOT, #Gesture slot using GESTURE_SLOT_ Enums
		IN sequenceId, PN_Number, #The sequence ID to play, can be retrieved with Entity:LookupSequence.
		IN cycle, PN_Number, #The cycle to start the animation at, ranges from 0 to 1.
		IN autokill, PN_Bool, PNF_Nullable, #If the animation should not loop. true = stops the animation, false = the animation keeps playing.
	}
	PURE Alive, SHARED
	{
		DESC Checks if the player is alive.
		OUT alive, PN_Bool, #Whether the player is alive
	}
	FUNC AllowFlashlight, SHARED
	{
		DESC Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.
		IN canFlashlight, PN_Bool, #True allows flashlight toggling
	}
	FUNC AllowImmediateDecalPainting, SERVER
	{
		DESC Lets the player spray his decal without delay
		IN allow, PN_Bool, #Allow or disallow
	}
	FUNC AnimResetGestureSlot, SHARED
	{
		DESC Resets player gesture in selected slot.
		IN slot, PN_Enum, PNF_None, GESTURE_SLOT, #Slot to reset. See the GESTURE_SLOT_ Enums.
	}
	FUNC AnimRestartGesture, SHARED
	{
		DESC Restart a gesture on a player, within a gesture slot.
		IN slot, PN_Enum, PNF_None, GESTURE_SLOT, #Gesture slot using GESTURE_SLOT_ Enums
		IN activity, PN_Enum, PNF_None, ACT, #The activity ( see ACT_ Enums ) or sequence that should be played
		IN autokill, PN_Bool, PNF_Nullable, #Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping
	}
	FUNC AnimRestartMainSequence, SHARED
	{
		DESC Restarts the main animation on the player, has the same effect as calling Entity:SetCycle( 0 ).
	}
	FUNC AnimSetGestureSequence, SHARED
	{
		DESC Sets the sequence of the animation playing in the given gesture slot.
		IN slot, PN_Enum, PNF_None, GESTURE_SLOT, #The gesture slot. See GESTURE_SLOT_ Enums
		IN sequenceID, PN_Number, #Sequence ID to set.
	}
	FUNC AnimSetGestureWeight, SHARED
	{
		DESC Sets the weight of the animation playing in the given gesture slot.
		IN slot, PN_Enum, PNF_None, GESTURE_SLOT, #The gesture slot. See GESTURE_SLOT_ Enums
		IN weight, PN_Number, #The weight this slot should be set to. Value must be ranging from 0 to 1.
	}
	PURE Armor, SHARED
	{
		DESC Returns the player's armor.
		OUT armor, PN_Number, #The player's armor.
	}
	FUNC Ban, SERVER
	{
		PROTECTED
		DESC Bans the player from the server for a certain amount of minutes.
		IN minutes, PN_Number, #Duration of the ban in minutes (0 is permanent)
		IN kick, PN_Bool, PNF_Nullable, #Whether to kick the player after banning then or not
	}
	PURE CanUseFlashlight, SHARED
	{
		DESC Returns true if the player's flashlight hasn't been disabled by Player:AllowFlashlight.
		OUT canUse, PN_Bool, #Whether the player can use flashlight.
	}
	FUNC ChatPrint, SHARED
	{
		DESC Prints a string to the chatbox of the client.
		IN message, PN_String, #String to be printed
	}
	PURE CheckLimit, SHARED
	{
		DESC Checks if the limit is hit or not. If it is, it will throw a notification saying so.
		IN limitType, PN_String, #Limit type. In unmodified Sandbox possible values are: "props" "ragdolls" "vehicles" "effects" "balloons" "cameras" "npcs" "sents" "dynamite" "lamps" "lights" "wheels" "thrusters" "hoverballs" "buttons" "emitters"
		OUT hitLimit, PN_Bool, #Returns true if limit is not hit, false if it is hit
	}
	FUNC ConCommand, SHARED
	{
		DESC Runs the concommand on the player. This does not work on bots.
		IN command, PN_String, #command to run
	}
	FUNC CreateRagdoll, SERVER
	{
		DESC Creates the player's ragdoll entity. This is normally used when a player dies, to create their death ragdoll. The ragdoll will be created with the player's properties such as Position, Angles, PlayerColor, Velocity and Model. You can retrieve the entity this creates with Player:GetRagdollEntity. 
	}
	FUNC CrosshairDisable, SERVER
	{
		DESC Disables the default player's crosshair. Can be reenabled with Player:CrosshairEnable. This will affect WEAPON:DoDrawCrosshair.
	}
	FUNC CrosshairEnable, SERVER
	{
		DESC Enables the player's crosshair, if it was previously disabled via Player:CrosshairDisable.
	}
	PURE Crouching, SHARED
	{
		DESC Returns whether the player is crouching or not
		OUT crouching, PN_Bool, #Whether the player is crouching
	}
	PURE Deaths, SHARED
	{
		DESC Returns the player's death count
		OUT deaths, PN_Number, #The number of deaths the player has had.
	}
	FUNC DebugInfo, SERVER
	{
		DESC Prints the players' name and position to the console.
	}
	FUNC DetonateTripmines, SERVER
	{
		DESC Detonates all tripmines belonging to the player.
	}
	FUNC DoAnimationEvent, SHARED
	{
		DESC Sends a third person animation event to the player.
		IN data, PN_Number, #The data to send.
	}
	FUNC DoAttackEvent, SHARED
	{
		DESC Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.
	}
	FUNC DoCustomAnimEvent, SHARED
	{
		DESC Sends a specified third person animation event to the player.
		IN event, PN_Enum, PNF_None, PLAYERANIMEVENT, #The event to send. See PLAYERANIMEVENT_ Enums.
		IN data, PN_Number, #The data to send alongside the event.
	}
	FUNC DoReloadEvent, SHARED
	{
		DESC Sends a third person reload animation event to the player.
	}
	FUNC DoSecondaryAttack, SHARED
	{
		DESC Sends a third person secondary fire animation event to the player.
	}
	FUNC DrawViewModel, SHARED
	{
		DESC Show/Hide the player's weapon's viewmodel.
		IN draw, PN_Bool, #Should draw
		IN vm, PN_Number, PNF_Nullable, #Which view model to show/hide, 0-2.
	}
	FUNC DrawWorldModel, SERVER
	{
		DESC Show/Hide the player's weapon's worldmodel.
		IN draw, PN_Bool, #Should draw
	}
	FUNC DropNamedWeapon, SERVER
	{
		DESC Drops the players' weapon of a specific class.
		IN class, PN_String, #The class to drop.
		IN target, PN_Vector, PNF_Nullable, #If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
		IN velocity, PN_Vector, PNF_Nullable, #If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
	}
	FUNC DropObject, SERVER
	{
		DESC Drops any object the player is currently holding with either gravitygun or +Use (E key)
	}
	FUNC DropWeapon, SERVER
	{
		DESC Forces the player to drop the specified weapon
		IN weapon, PN_Ref, PNF_Nullable, Weapon, #Weapon to be dropped. If unset, will default to the currently equipped weapon.
		IN target, PN_Vector, PNF_Nullable, #If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
		IN velocity, PN_Vector, PNF_Nullable, #If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
	}
	FUNC EnterVehicle, SERVER
	{
		DESC Enters the player into specified vehicle
		IN vehicle, PN_Ref, PNF_None, Vehicle, #Vehicle the player will enter
	}
	FUNC EquipSuit, SERVER
	{
		DESC Equips the player with the HEV suit.
	}
	FUNC ExitVehicle, SERVER
	{
		DESC Makes the player exit the vehicle if they're in one.
	}
	FUNC Flashlight, SERVER
	{
		DESC Enables/Disables the player's flashlight
		IN isOn, PN_Bool, #Turns the flashlight on/off
	}
	PURE FlashlightIsOn, SHARED
	{
		DESC Returns true if the player's flashlight is on.
		OUT on, PN_Bool, #Whether the player's flashlight is on.
	}
	PURE Frags, SHARED
	{
		DESC Returns the amount of kills a player has.
		OUT out_0, PN_Number, #kills
	}
	FUNC Freeze, SERVER
	{
		DESC Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to Player:Lock but the player can still take damage.
		IN frozen, PN_Bool, PNF_Nullable, #Whether the player should be frozen.
	}
	PURE GetActiveWeapon, SHARED
	{
		DESC Returns the player's active weapon.
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon the player is currently has equipped.
	}
	PURE GetAimVector, SHARED
	{
		DESC Returns the direction that the player is aiming.
		OUT vector, PN_Vector, #The direction vector of players aim
	}
	PURE GetAllowFullRotation, SHARED
	{
		DESC Returns true if the players' model is allowed to rotate around the pitch and roll axis.
		OUT allowed, PN_Bool, #Allowed
	}
	PURE GetAllowWeaponsInVehicle, SHARED
	{
		DESC Returns whether the player is allowed to use his weapons in a vehicle or not.
		OUT allowed, PN_Bool, #Whether the player is allowed to use his weapons in a vehicle or not.
	}
	PURE GetAmmo, SHARED
	{
		DESC Returns a table of all ammo the player has.
		OUT ammo, PN_Number, PNF_Table, #number Key: AmmoID to be used with functions like game.GetAmmoName. number Value: Amount of ammo the player has of this kind.
	}
	PURE GetAmmoCount, SHARED
	{
		DESC Gets the amount of ammo the player has.
		IN ammotype, PN_Any, #The ammunition type. Can be either number ammo ID or string ammo name.
		OUT count, PN_Number, #The amount of ammo player has in reserve.
	}
	PURE GetAvoidPlayers, SHARED
	{
		DESC Gets if the player will be pushed out of nocollided players.
		OUT pushed, PN_Bool, #pushed
	}
	PURE GetCanWalk, SHARED
	{
		DESC Returns true if the player is able to walk using the (default) alt key.
		OUT canWalk, PN_Bool, #AbleToWalk
	}
	PURE GetCanZoom, SHARED
	{
		DESC Determines whenever the player is allowed to use the zoom functionality.
		OUT canZoom, PN_Bool, #canZoom
	}
	PURE GetClassID, SHARED
	{
		DESC Returns the player's class id.
		OUT classID, PN_Number, #The player's class id.
	}
	PURE GetCount, SHARED
	{
		DESC Gets total count of entities of same class.
		IN type, PN_String, #Entity type to get count of.
		IN minus, PN_Number, PNF_Nullable, #If specified, it will reduce the counter by this value. Works only serverside.
		OUT count, PN_Number, #The returned count
	}
	PURE GetCrouchedWalkSpeed, SHARED
	{
		DESC Returns the crouched walk speed multiplier.
		OUT speed, PN_Number, #The crouched walk speed multiplier.
	}
	PURE GetCurrentCommand, SHARED
	{
		DESC Returns the last command which was sent by the specified player. Can only be used in a Predicted Hook.
		OUT command, PN_Ref, PNF_None, CUserCmd, #Last user commands
	}
	PURE GetCurrentViewOffset, SHARED
	{
		DESC Gets the actual view offset which equals the difference between the players actual position and their view when standing.
		OUT offset, PN_Vector, #The actual view offset.
	}
	PURE GetDrivingEntity, SHARED
	{
		DESC Gets the entity the player is currently driving.
		OUT entity, PN_Ref, PNF_None, Entity, #DriveEntity
	}
	PURE GetDrivingMode, SHARED
	{
		DESC Returns driving mode of the player. See Entity Driving.
		OUT mode, PN_Number, #The drive mode ID or 0 if player doesn't use the drive system.
	}
	PURE GetDuckSpeed, SHARED
	{
		DESC Returns a player's duck speed (in seconds)
		OUT speed, PN_Number, #duckspeed
	}
	PURE GetEntityInUse, SHARED
	{
		DESC Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.
		OUT entity, PN_Ref, PNF_None, Entity, #Entity in use, or NULL entity otherwise. For +use prop pickups, this will be NULL clientside.
	}
	PURE GetEyeTrace, SHARED
	{
		DESC Returns a table with information of what the player is looking at.
		OUT trace, PN_Struct, PNF_None, TraceResult, #Trace information, see TraceResult structure
	}
	PURE GetEyeTraceNoCursor, SHARED
	{
		DESC Returns the trace according to the players view direction, ignoring their mouse ( Holding C and moving the mouse in Sandbox ).
		OUT trace, PN_Struct, PNF_None, TraceResult, #Trace result. See TraceResult structure
	}
	PURE GetFOV, SHARED
	{
		DESC Returns the FOV of the player.
		OUT FOV, PN_Number, #Field of view as a float
	}
	PURE GetFriendStatus, CLIENT
	{
		DESC Returns the steam "relationship" towards the player.
		OUT status, PN_String, #Should return one of four different things depending on their status on your friends list: "friend", "blocked", "none" or "requested".
	}
	PURE GetHands, SHARED
	{
		DESC Gets the hands entity of a player
		OUT hands, PN_Ref, PNF_None, Entity, #The hands entity if players has one
	}
	PURE GetHoveredWidget, SHARED
	{
		DESC Returns the widget the player is hovering with his mouse.
		OUT widget, PN_Ref, PNF_None, Entity, #The hovered widget.
	}
	PURE GetHull, SHARED
	{
		DESC Gets the bottom base and the top base size of the player's hull.
		OUT mins, PN_Vector, #Player's hull bottom base size
		OUT maxs, PN_Vector, #Player's hull top base size
	}
	PURE GetHullDuck, SHARED
	{
		DESC Gets the bottom base and the top base size of the player's crouch hull.
		OUT mins, PN_Vector, #Player's crouch hull bottom base size
		OUT maxs, PN_Vector, #Player's crouch hull top base size
	}
	PURE GetInfo, SERVER
	{
		DESC Retrieves the value of a client-side ConVar. The ConVar must have a FCVAR_USERINFO flag for this to work.
		IN cVarName, PN_String, #The name of the client-side ConVar
		OUT value, PN_String, #The value of the ConVar
	}
	PURE GetInfoNum, SERVER
	{
		DESC Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The ConVar must have a FCVAR_USERINFO flag for this to work.
		IN cVarName, PN_String, #The name of the ConVar to query the value of
		IN default, PN_Number, #Default value if we failed to retrieve the number.
		OUT value, PN_Number, #The value of the ConVar or the default value
	}
	PURE GetJumpPower, SHARED
	{
		DESC Returns the jump power of the player
		OUT power, PN_Number, #Jump power
	}
	PURE GetLaggedMovementValue, SHARED
	{
		DESC Returns the timescale multiplier of the player movement.
		OUT value, PN_Number, #The timescale multiplier, defaults to 1.
	}
	PURE GetMaxSpeed, SHARED
	{
		DESC Returns the player's maximum movement speed.
		OUT maxSpeed, PN_Number, #The maximum movement speed the player can go at.
	}
	PURE GetName, SHARED
	{
		DESC Returns the player's name, this is an alias of Player:Nick.
		OUT name, PN_String, #The player's name. BUG	 This is limited to 31 characters even though Steam names can have 32. Issue Tracker: #3178
	}
	PURE GetNoCollideWithTeammates, SHARED
	{
		DESC Returns whenever the player is set not to collide with their teammates.
		OUT noCollide, PN_Bool, #noCollideWithTeammates
	}
	PURE GetObserverMode, SHARED
	{
		DESC Returns the the observer mode of the player
		OUT mode, PN_Enum, PNF_None, OBS_MODE, #Observe mode of that player, see OBS_MODE_ Enums.
	}
	PURE GetObserverTarget, SHARED
	{
		DESC Returns the entity the player is currently observing.
		OUT target, PN_Ref, PNF_None, Entity, #The entity the player is currently spectating, or NULL if the player has no target.
	}
	PURE GetPData, SHARED
	{
		DESC Returns a Player Data key-value pair from the SQL database. (sv.db when called on server, cl.db when called on client)
		IN key, PN_String, #Name of the PData key
		IN default, PN_Any, PNF_Nullable, #Default value if PData key doesn't exist.
		OUT data, PN_String, #The data in the SQL database or the default value given.
	}
	PURE GetPlayerColor, SHARED
	{
		DESC Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.
		OUT color, PN_Vector, #color
	}
	PURE GetPlayerInfo, CLIENT
	{
		DESC Returns a table containing player information.
		OUT info, PN_Any, PNF_Table, #A table containing player information.
	}
	PURE GetPreferredCarryAngles, SERVER
	{
		DESC Returns the preferred carry angles of an object, if any are set.
		IN carryEnt, PN_Ref, PNF_None, Entity, #Entity to retrieve the carry angles of.
		OUT angles, PN_Angles, #Carry angles or nil if the entity has no preferred carry angles.
	}
	PURE GetPressedWidget, SHARED
	{
		DESC Returns the widget entity the player is using.
		OUT widget, PN_Ref, PNF_None, Entity, #The pressed widget.
	}
	PURE GetPunchAngle, SHARED
	{
		DESC Returns players screen punch effect angle.
		OUT angles, PN_Angles, #The punch angle
	}
	PURE GetRagdollEntity, SHARED
	{
		DESC Returns players death ragdoll. The ragdoll is created by Player:CreateRagdoll.
		OUT ragdoll, PN_Ref, PNF_None, Entity, #The ragdoll. Unlike normal clientside ragdolls (C_ClientRagdoll), this will be a C_HL2MPRagdoll on the client, and hl2mp_ragdoll on the server.
	}
	PURE GetRenderAngles, SHARED
	{
		DESC Returns the render angles for the player.
		OUT angles, PN_Angles, #The render angles of the player. Only yaw part of the angle seems to be present.
	}
	PURE GetRunSpeed, SHARED
	{
		DESC Returns the player's sprint speed.
		OUT speed, PN_Number, #The sprint speed
	}
	PURE GetShootPos, SHARED
	{
		DESC Returns the position of a Player's view
		OUT pos, PN_Vector, #aim pos
	}
	PURE GetStepSize, SHARED
	{
		DESC Returns the maximum height player can step onto.
		OUT size, PN_Number, #The maximum height player can get up onto without jumping, in hammer units.
	}
	PURE GetTimeoutSeconds, SERVER
	{
		DESC Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with Player:IsTimingOut.
		OUT seconds, PN_Number, #Timeout seconds.
	}
	PURE GetTool, SHARED
	{
		DESC Returns TOOL table of players current tool, or of the one specified.
		IN mode, PN_String, PNF_Nullable, #Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )
		OUT tool, PN_Ref, PNF_None, Tool, #TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun.
	}
	PURE GetUnDuckSpeed, SHARED
	{
		DESC Returns a player's unduck speed (in seconds)
		OUT speed, PN_Number, #unduck speed
	}
	PURE GetUserGroup, SHARED
	{
		DESC Returns the player's user group.
		OUT group, PN_String, #The user group of the player. This will return "user" if player has no user group.
	}
	PURE GetVehicle, SHARED
	{
		DESC Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.
		OUT vehicle, PN_Ref, PNF_None, Vehicle, #vehicle
	}
	PURE GetViewEntity, SHARED
	{
		DESC Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).
		OUT entity, PN_Ref, PNF_None, Entity, #The entity the player is using to see from
	}
	PURE GetViewModel, SHARED
	{
		DESC Returns the player's view model entity by the index. Each player has 3 view models by default, but only the first one is used.
		IN index, PN_Number, PNF_Nullable, #optional index of the view model to return, can range from 0 to 2
		OUT viewModel, PN_Ref, PNF_None, Entity, #The view model entity
	}
	PURE GetViewOffset, SHARED
	{
		DESC Returns the view offset of the player which equals the difference between the players actual position and their view.
		OUT offset, PN_Vector, #New view offset, must be local vector to players Entity:GetPos
	}
	PURE GetViewOffsetDucked, SHARED
	{
		DESC Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.
		OUT offset, PN_Vector, #New crouching view offset, must be local vector to players Entity:GetPos
	}
	PURE GetViewPunchAngles, SHARED
	{
		DESC Returns players screen punch effect angle.
		OUT angles, PN_Angles, #The punch angle
	}
	PURE GetWalkSpeed, SHARED
	{
		DESC Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)
		OUT speed, PN_Number, #The normal walking speed.
	}
	PURE GetWeapon, SHARED
	{
		DESC Returns the weapon for the specified class
		IN className, PN_String, #Class name of weapon
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon for the specified class.
	}
	PURE GetWeaponColor, SHARED
	{
		DESC Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.
		OUT color, PN_Vector, #color
	}
	PURE GetWeapons, SHARED
	{
		DESC Returns a table of the player's weapons.
		OUT weapons, PN_Ref, PNF_Table, Weapon, #All the weapons the player currently has.
	}
	FUNC Give, SERVER
	{
		REDIRECTPIN bNoAmmo, noAmmo
		DESC Gives the player a weapon.
		IN weaponClassName, PN_String, #Class name of weapon to give the player
		IN noAmmo, PN_Bool, PNF_Nullable, #Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)
		OUT weapon, PN_Ref, PNF_None, Weapon, #The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist.
	}
	FUNC GiveAmmo, SERVER
	{
		DESC Gives ammo to a player
		IN amount, PN_Number, #Amount of ammo
		IN type, PN_String, #Type of ammo. This can also be a number for ammo ID, useful for custom ammo types. You can find a list of default ammo types here.
		IN hidePopup, PN_Bool, PNF_Nullable, #Hide display popup when giving the ammo
		OUT ammoID, PN_Number, #Ammo given.
	}
	FUNC GodDisable, SERVER
	{
		DESC Disables god mode on the player.
	}
	FUNC GodEnable, SERVER
	{
		DESC Enables god mode on the player.
	}
	PURE HasGodMode, SHARED
	{
		DESC Returns whether the player has god mode or not, contolled by Player:GodEnable and Player:GodDisable.
		OUT godMode, PN_Bool, #Whether the player has god mode or not.
	}
	PURE HasWeapon, SHARED
	{
		DESC Returns if the player has the specified weapon
		IN className, PN_String, #Class name of the weapon
		OUT hasWeapon, PN_Bool, #True if the player has the weapon
	}
	PURE InVehicle, SHARED
	{
		DESC Returns if the player is in a vehicle
		OUT inVehicle, PN_Bool, #Whether the player is in a vehicle.
	}
	PURE IPAddress, SERVER
	{
		DESC Returns the player's IP address and connection port in ip:port form
		OUT address, PN_String, #The player's IP address and connection port
	}
	PURE IsAdmin, SHARED
	{
		DESC Returns whether the player is an admin or not
		OUT admin, PN_Bool, #True if the player is an admin
	}
	PURE IsBot, SHARED
	{
		DESC Returns if the player is an bot or not
		OUT bot, PN_Bool, #True if the player is a bot.
	}
	PURE IsConnected, SERVER
	{
		DESC Returns true from the point when the player is sending client info but not fully in the game until they disconnect.
		OUT connected, PN_Bool, #isConnected
	}
	PURE IsDrivingEntity, SHARED
	{
		DESC Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).
		OUT driving, PN_Bool, #A value representing whether or not the player is 'driving' an entity.
	}
	PURE IsFrozen, SHARED
	{
		DESC Returns whether the players movement is currently frozen, contolled by Player:Freeze.
		OUT frozen, PN_Bool, #Whether the players movement is currently frozen or not.
	}
	PURE IsFullyAuthenticated, SERVER
	{
		DESC Returns whether the player identity was confirmed by the steam network.
		OUT authenticated, PN_Bool, #Whether the player has been fully authenticated or not. This will always be true for singleplayer and the listen server host. This will always be false for bots.
	}
	PURE IsListenServerHost, SERVER
	{
		DESC Returns if a player is the host of the current session.
		OUT host, PN_Bool, #True if the player is the listen server host, false otherwise. This will always be true in single player, and false on a dedicated server.
	}
	PURE IsMuted, CLIENT
	{
		DESC Returns whether or not the player is muted locally.
		OUT muted, PN_Bool, #whether or not the player is muted locally.
	}
	PURE IsPlayingTaunt, SHARED
	{
		DESC Returns true if the player is playing a taunt.
		OUT taunting, PN_Bool, #Whether the player is playing a taunt.
	}
	PURE IsSpeaking, CLIENT
	{
		DESC Returns whenever the player is heard by the local player.
		OUT speaking, PN_Bool, #isSpeaking
	}
	PURE IsSprinting, SHARED
	{
		DESC Returns whether the player is currently sprinting or not.
		OUT sprinting, PN_Bool, #Is the player sprinting or not
	}
	PURE IsSuitEquipped, SHARED
	{
		DESC Returns whenever the player is equipped with the suit item.
		OUT suit, PN_Bool, #Is the suit equipped or not.
	}
	PURE IsSuperAdmin, SHARED
	{
		DESC Returns whether the player is a superadmin.
		OUT superAdmin, PN_Bool, #True if the player is a superadmin.
	}
	PURE IsTimingOut, SERVER
	{
		DESC Returns true if the player is timing out (i.e. is losing connection), false otherwise.
		OUT timingOut, PN_Bool, #isTimingOut
	}
	PURE IsTyping, SHARED
	{
		DESC Returns whether the player is typing in their chat.
		OUT typing, PN_Bool, #Whether the player is typing in their chat or not.
	}
	PURE IsUserGroup, SHARED
	{
		DESC Returns true/false if the player is in specified group or not.
		IN groupname, PN_String, #Group to check the player for.
		OUT inGroup, PN_Bool, #isInUserGroup
	}
	PURE IsVoiceAudible, CLIENT
	{
		DESC Returns if the player can be heard by the local player.
		OUT audible, PN_Bool, #isAudible
	}
	PURE IsWorldClicking, SHARED
	{
		DESC Returns if the player is in the context menu.
		OUT clicking, PN_Bool, #Is the player world clicking or not.
	}
	PURE KeyDown, SHARED
	{
		DESC Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.
		IN key, PN_Enum, PNF_None, IN, #The key, see IN_ Enums
		OUT down, PN_Bool, #isDown
	}
	PURE KeyDownLast, SHARED
	{
		DESC Gets whether a key was down one tick ago.
		IN key, PN_Enum, PNF_None, IN, #The key, see IN_ Enums
		OUT down, PN_Bool, #Is key down
	}
	PURE KeyPressed, SHARED
	{
		DESC Gets whether a key was just pressed this tick
		IN key, PN_Enum, PNF_None, IN, #Corresponds to an IN_ Enums
		OUT pressed, PN_Bool, #Was pressed or not
	}
	PURE KeyReleased, SHARED
	{
		DESC Gets whether a key was just released this tick
		IN key, PN_Enum, PNF_None, IN, #The key, see IN_ Enums
		OUT released, PN_Bool, #Was released or not
	}
	FUNC Kick, SERVER
	{
		PROTECTED
		DESC Kicks the player from the server.
		IN reason, PN_String, PNF_Nullable, #Reason to show for disconnection. WARNING	 This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.
	}
	FUNC Kill, SERVER
	{
		DESC Kills a player and calls GM:PlayerDeath.
	}
	FUNC KillSilent, SERVER
	{
		DESC Kills a player without notifying the rest of the server.
	}
	FUNC LagCompensation, SHARED
	{
		DESC This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.
		IN lagCompensation, PN_Bool, #The state of the lag compensation, true to enable and false to disable.
	}
	PURE LastHitGroup, SERVER
	{
		DESC Returns the hitgroup where the player was last hit.
		OUT hitGroup, PN_Enum, PNF_None, HITGROUP, #Hitgroup, see HITGROUP_ Enums
	}
	PURE LimitHit, SHARED
	{
		DESC Shows "limit hit" notification in sandbox. 
		IN type, PN_String, #Type of hit limit
	}
	FUNC Lock, SERVER
	{
		DESC Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to Player:Freeze but the player takes no damage.
	}
	PURE MotionSensorPos, SHARED
	{
		DESC Returns the position of a Kinect bone.
		IN bone, PN_Number, #Bone to get the position of. Must be from 0 to 19.
		OUT pos, PN_Vector, #Position of the bone.
	}
	PURE Name, SHARED
	{
		DESC Returns the players name. Identical to Player:Nick and Player:GetName.
		OUT name, PN_String, #Player's Steam name. BUG	 This is limited to 31 characters even though Steam names can have 32. Issue Tracker: #3178
	}
	PURE Nick, SHARED
	{
		DESC Returns the player's nickname.
		OUT name, PN_String, #Player's Steam name BUG	 This is limited to 31 characters even though Steam names can have 32. Issue Tracker: #3178
	}
	PURE PacketLoss, SHARED
	{
		DESC Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.
		OUT packetLoss, PN_Number, #Packets lost
	}
	FUNC PhysgunUnfreeze, SHARED
	{
		DESC Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.
		OUT count, PN_Number, #Number of props unfrozen.
	}
	FUNC PickupObject, SERVER
	{
		DESC This makes the player hold ( same as pressing E on a small prop ) the provided entity.
		IN entity, PN_Ref, PNF_None, Entity, #Entity to pick up.
	}
	PURE Ping, SHARED
	{
		DESC Returns the player's ping to server.
		OUT ping, PN_Number, #The player's ping.
	}
	FUNC PlayStepSound, SERVER
	{
		DESC Plays the correct step sound according to what the player is staying on.
		IN volume, PN_Number, #Volume for the sound, in range from 0 to 1
	}
	FUNC PrintMessage, SHARED
	{
		DESC Displays a message either in their chat, console, or center of the screen. See also PrintMessage.
		IN type, PN_Number, #Which type of message should be sent to the player (HUD_ Enums)
		IN message, PN_String, #Message to be sent to the player
	}
	FUNC RemoveAllAmmo, SERVER
	{
		DESC Removes all ammo from a certain player
	}
	FUNC RemoveAllItems, SERVER
	{
		DESC Removes all weapons and ammo from the player.
	}
	FUNC RemoveAmmo, SHARED
	{
		DESC Removes the amount of the specified ammo from the player.
		IN ammoCount, PN_Number, #The amount of ammunition to remove.
		IN ammoName, PN_String, #The name of the ammunition to remove from. This can also be a number ammoID.
	}
	FUNC RemovePData, SHARED
	{
		DESC Removes a Player Data key-value pair from the SQL database. (sv.db when called on server, cl.db when called on client)
		IN key, PN_String, #Key to remove
		OUT success, PN_Bool, #true is succeeded, false otherwise
	}
	FUNC RemoveSuit, SERVER
	{
		DESC Strips the player's suit item.
	}
	FUNC ResetHull, SHARED
	{
		DESC Resets both normal and duck hulls to their default values.
	}
	FUNC Say, SERVER
	{
		DESC Forces the player to say whatever the first argument is. Works on bots too.
		IN text, PN_String, #The text to force the player to say.
		IN teamOnly, PN_Bool, PNF_Nullable, #Whether to send this message to our own team only.
	}
	FUNC ScreenFade, SHARED
	{
		DESC Fades the screen
		IN flags, PN_Enum, PNF_None, SCREENFADE, #Fade flags defined with SCREENFADE_ Enums.
		IN clr, PN_Color, #The color of the screenfade
		IN fadeTime, PN_Number, #Fade(in/out) effect transition time ( From no fade to full fade and vice versa )
		IN fadeHold, PN_Number, #Fade effect hold time
	}
	FUNC SelectWeapon, SERVER
	{
		DESC Sets the active weapon of the player by its class name.
		IN className, PN_String, #The class name of the weapon to switch to. If the player doesn't have the specified weapon, nothing will happen. You can use Player:Give to give the weapon first.
	}
	FUNC SendHint, SERVER
	{
		DESC Sends a hint to a player.
		IN name, PN_String, #Name/class/index of the hint. The text of the hint will contain this value. ( "#Hint_" .. name ) An example is PhysgunFreeze.
		IN delay, PN_Number, #Delay in seconds before showing the hint
	}
	FUNC SetActiveWeapon, SERVER
	{
		DESC Sets the player's active weapon. You should use CUserCmd:SelectWeapon or Player:SelectWeapon, instead in most cases.
		IN weapon, PN_Ref, PNF_None, Weapon, #The weapon to equip.
	}
	FUNC SetAllowFullRotation, SHARED
	{
		DESC Set if the players' model is allowed to rotate around the pitch and roll axis.
		IN Allowed, PN_Bool, #Allowed to rotate
	}
	FUNC SetAllowWeaponsInVehicle, SERVER
	{
		DESC Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.
		IN allow, PN_Bool, #Show we allow player to use his weapons in a vehicle or not.
	}
	FUNC SetAmmo, SHARED
	{
		DESC Sets the amount of the specified ammo for the player.
		IN ammoCount, PN_Number, #The amount of ammunition to set.
		IN ammoType, PN_Any, #The ammunition type. Can be either number ammo ID or string ammo name.
	}
	FUNC SetArmor, SERVER
	{
		DESC Sets the player armor to the argument.
		IN Amount, PN_Number, #The amount that the player armor is going to be set to.
	}
	FUNC SetAvoidPlayers, SHARED
	{
		DESC Pushes the player away from another player whenever it's inside the other players bounding box.
		IN avoidPlayers, PN_Bool, #Avoid or not avoid.
	}
	FUNC SetCanWalk, SHARED
	{
		DESC Set if the player should be allowed to walk using the (default) alt key.
		IN abletowalk, PN_Bool, #True allows the player to walk.
	}
	FUNC SetCanZoom, SERVER
	{
		DESC Sets whether the player can use the HL2 suit zoom ("+zoom" bind) or not.
		IN canZoom, PN_Bool, #Whether to make the player able or unable to zoom.
	}
	FUNC SetClassID, SHARED
	{
		DESC Sets the player's class id.
		IN classID, PN_Number, #The class id the player is being set with.
	}
	FUNC SetCrouchedWalkSpeed, SHARED
	{
		DESC Sets the crouched walk speed multiplier.
		IN speed, PN_Number, #The walk speed multiplier that crouch speed should be.
	}
	FUNC SetCurrentViewOffset, SHARED
	{
		DESC Sets the actual view offset which equals the difference between the players actual position and their view when standing.
		IN viewOffset, PN_Vector, #The new view offset.
	}
	FUNC SetDeaths, SERVER
	{
		DESC Sets a player's death count
		IN deathcount, PN_Number, #Number of deaths (positive or negative)
	}
	FUNC SetDrivingEntity, SHARED
	{
		DESC Sets the driving entity and driving mode.
		IN drivingEntity, PN_Ref, PNF_Nullable, Entity, #The entity the player should drive.
		IN drivingMode, PN_Number, #The driving mode index.
	}
	FUNC SetDSP, SHARED
	{
		DESC Applies the specified sound filter to the player.
		IN soundFilter, PN_Number, #The index of the sound filter to apply. Pick from the list of DSP's.
		IN fastReset, PN_Bool, #If set to true the sound filter will be removed faster.
	}
	FUNC SetDuckSpeed, SHARED
	{
		DESC Sets how quickly a player ducks.
		IN duckSpeed, PN_Number, #How quickly the player will duck.
	}
	FUNC SetEyeAngles, SHARED
	{
		DESC Sets the angle of the player's view (may rotate body too if angular difference is large)
		IN angle, PN_Angles, #Angle to set the view to
	}
	FUNC SetFOV, SHARED
	{
		DESC Set a player's FOV (Field Of View) over a certain amount of time.
		IN fov, PN_Number, #the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )
		IN time, PN_Number, PNF_Nullable, #the time it takes to transition to the FOV expressed in a floating point.
	}
	FUNC SetFrags, SERVER
	{
		DESC Sets a player's frags (kills)
		IN fragcount, PN_Number, #Number of frags (positive or negative)
	}
	FUNC SetHands, SHARED
	{
		DESC Sets the hands entity of a player.
		IN hands, PN_Ref, PNF_None, Entity, #The hands entity to set
	}
	FUNC SetHoveredWidget, SHARED
	{
		DESC Sets the widget that is currently hovered by the player's mouse.
		IN widget, PN_Ref, PNF_Nullable, Entity, #The widget entity that the player is hovering.
	}
	FUNC SetHull, SHARED
	{
		DESC Sets the mins and maxs of the AABB of the players collision.
		IN mins, PN_Vector, #The min coordinates of the hull.
		IN maxs, PN_Vector, #The max coordinates of the hull.
	}
	FUNC SetHullDuck, SHARED
	{
		DESC Sets the mins and maxs of the AABB of the players collision when ducked.
		IN mins, PN_Vector, #The min coordinates of the hull.
		IN maxs, PN_Vector, #The max coordinates of the hull.
	}
	FUNC SetJumpPower, SHARED
	{
		DESC Sets the jump power, eg. the velocity the player will applied to when he jumps.
		IN jumpPower, PN_Number, #The new jump velocity.
	}
	FUNC SetLaggedMovementValue, SERVER
	{
		DESC Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.
		IN timescale, PN_Number, #The timescale multiplier.
	}
	FUNC SetMaxSpeed, SHARED
	{
		DESC Sets the maximum speed which the player can move at.
		IN walkSpeed, PN_Number, #The maximum speed.
	}
	FUNC SetMuted, CLIENT
	{
		DESC Sets if the player should be muted locally.
		IN mute, PN_Bool, #Mute or unmute.
	}
	FUNC SetNoCollideWithTeammates, SERVER
	{
		DESC Sets whenever the player should not collide with their teammates.
		IN shouldNotCollide, PN_Bool, #True to disable, false to enable collision.
	}
	FUNC SetNoTarget, SERVER
	{
		DESC Sets the players visibility towards NPCs.
		IN visibility, PN_Bool, #The visibility.
	}
	FUNC SetObserverMode, SHARED
	{
		DESC Sets the players observer mode. You must start the spectating first with Player:Spectate.
		IN mode, PN_Enum, PNF_None, OBS_MODE, #Spectator mode using OBS_MODE_ Enums.
	}
	FUNC SetPData, SHARED
	{
		DESC Writes a Player Data key-value pair to the SQL database. (sv.db when called on server, cl.db when called on client)
		IN key, PN_String, #Name of the PData key
		IN value, PN_Any, #Value to write to the key (must be an SQL valid data type, such as a string or integer)
		OUT success, PN_Bool, #Whether the operation was successful or not
	}
	FUNC SetPlayerColor, SHARED
	{
		DESC Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.
		IN Color, PN_Vector, #This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.
	}
	FUNC SetPressedWidget, SHARED
	{
		DESC Sets the widget that is currently in use by the player's mouse.
		IN pressedWidget, PN_Ref, PNF_Nullable, Entity, #The widget the player is currently using.
	}
	FUNC SetRenderAngles, SHARED
	{
		DESC Sets the render angles of a player.
		IN ang, PN_Angles, #The new render angles to set
	}
	FUNC SetRunSpeed, SHARED
	{
		DESC Sets the player's sprint speed.
		IN runSpeed, PN_Number, #The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed. Has to be 7 or above or the player won't be able to move.
	}
	FUNC SetStepSize, SHARED
	{
		DESC Sets the maximum height a player can step onto without jumping.
		IN stepHeight, PN_Number, #The new maximum height the player can step onto without jumping
	}
	FUNC SetSuppressPickupNotices, SHARED
	{
		DESC Sets whenever to suppress the pickup notification for the player.
		IN doSuppress, PN_Bool, #Whenever to suppress the notice or not.
	}
	FUNC SetTeam, SERVER
	{
		DESC Sets the player to the chosen team.
		IN Team, PN_Number, #The team that the player is being set to.
	}
	FUNC SetUnDuckSpeed, SHARED
	{
		DESC Sets how quickly a player un-ducks
		IN UnDuckSpeed, PN_Number, #How quickly the player will un-duck
	}
	FUNC SetupHands, SERVER
	{
		DESC Sets up the players view model hands. Calls GM:PlayerSetHandsModel to set the model of the hands.
		IN ent, PN_Ref, PNF_None, Entity, #If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.
	}
	FUNC SetUserGroup, SERVER
	{
		DESC Sets the usergroup of the player.
		IN groupName, PN_String, #The user group of the player.
	}
	FUNC SetViewEntity, SERVER
	{
		DESC Attaches the players view to the position and angles of the specified entity.
		IN viewEntity, PN_Ref, PNF_None, Entity, #The entity to attach the player view to.
	}
	FUNC SetViewOffset, SHARED
	{
		DESC Sets the desired view offset which equals the difference between the players actual position and their view when standing.
		IN viewOffset, PN_Vector, #The new desired view offset when standing.
	}
	FUNC SetViewOffsetDucked, SHARED
	{
		DESC Sets the desired view offset which equals the difference between the players actual position and their view when crouching.
		IN viewOffset, PN_Vector, #The new desired view offset when crouching.
	}
	FUNC SetViewPunchAngles, SHARED
	{
		DESC Sets client's view punch. See Player:ViewPunch
		IN punchAngle, PN_Angles, #The angle to set.
	}
	FUNC SetWalkSpeed, SHARED
	{
		DESC Sets the player's normal walking speed. Not sprinting, not slow walking +walk.
		IN walkSpeed, PN_Number, #The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed. Has to be 7 or above or the player won't be able to move.
	}
	FUNC SetWeaponColor, SHARED
	{
		DESC Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.
		IN Color, PN_Vector, #This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.
	}
	PURE ShouldDrawLocalPlayer, CLIENT
	{
		DESC Polls the engine to request if the player should be drawn at the time the function is called.
		OUT shouldDraw, PN_Bool, #shouldDraw
	}
	FUNC ShouldDropWeapon, SERVER
	{
		DESC Sets whether the player's current weapon should drop on death.
		IN drop, PN_Bool, #Whether to drop the player's current weapon or not
	}
	FUNC ShowProfile, CLIENT
	{
		DESC Opens the player steam profile page in the steam overlay browser.
	}
	FUNC SimulateGravGunDrop, SERVER
	{
		DESC Signals the entity that it was dropped by the gravity gun.
		IN ent, PN_Ref, PNF_None, Entity, #Entity that was dropped.
	}
	FUNC SimulateGravGunPickup, SERVER
	{
		DESC Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.
		IN ent, PN_Ref, PNF_None, Entity, #The entity picked up
	}
	FUNC Spectate, SERVER
	{
		DESC Starts spectate mode for given player. This will also affect the players movetype in some cases.
		IN mode, PN_Enum, PNF_None, OBS_MODE, #Spectate mode, see OBS_MODE_ Enums.
	}
	FUNC SpectateEntity, SERVER
	{
		DESC Makes the player spectate the entity
		IN entity, PN_Ref, PNF_None, Entity, #Entity to spectate.
	}
	FUNC SprayDecal, SERVER
	{
		DESC Makes a player spray their decal.
		IN sprayOrigin, PN_Vector, #The location to spray from
		IN sprayEndPos, PN_Vector, #The location to spray to
	}
	FUNC SprintDisable, SERVER
	{
		DESC Disables the sprint on the player.
	}
	FUNC SprintEnable, SERVER
	{
		DESC Enables the sprint on the player.
	}
	FUNC StartSprinting, SHARED
	{
		DESC Doesn't appear to do anything.
	}
	FUNC StartWalking, SHARED
	{
		DESC When used in a GM:SetupMove hook, this function will force the player to walk, as well as preventing the player from sprinting.
	}
	PURE SteamID, SHARED
	{
		DESC Returns the player's SteamID. In singleplayer, this will be STEAM_ID_PENDING serverside.
		OUT steamID, PN_String, #SteamID
	}
	PURE SteamID64, SHARED
	{
		DESC Returns the player's 64bit SteamID aka CommunityID.
		OUT steamID, PN_String, #Player's 64bit SteamID aka CommunityID.
	}
	FUNC StopSprinting, SHARED
	{
		DESC When used in a GM:SetupMove hook, this function will prevent the player from sprinting.
	}
	FUNC StopWalking, SHARED
	{
		DESC When used in a GM:SetupMove hook, this function behaves unexpectedly by preventing the player from sprinting similar to Player:StopSprinting.
	}
	FUNC StopZooming, SERVER
	{
		DESC Turns off the zoom mode of the player. (+zoom console command)
	}
	FUNC StripAmmo, SERVER
	{
		DESC Removes all ammo from the player.
	}
	FUNC StripWeapon, SERVER
	{
		DESC Removes the specified weapon class from a certain player
		IN weapon, PN_String, #The weapon class to remove
	}
	FUNC StripWeapons, SERVER
	{
		DESC Removes all weapons from a certain player
	}
	FUNC SuppressHint, SERVER
	{
		DESC Prevents a hint from showing up. 
		IN name, PN_String, #Hint name/class/index to prevent from showing up
	}
	FUNC SwitchToDefaultWeapon, SERVER
	{
		DESC Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.
	}
	PURE Team, SHARED
	{
		DESC Returns the player's team ID.
		OUT team, PN_Enum, PNF_None, TEAM, #The player's team's index number, as in the TEAM_ Enums or a custom team defined in team.SetUp.
	}
	PURE TimeConnected, SERVER
	{
		DESC Returns the time in seconds since the player connected.
		OUT time, PN_Number, #connectTime
	}
	FUNC TraceHullAttack, SERVER
	{
		DESC Performs a trace hull and applies damage to the entities hit, returns the first entity hit.
		IN startPos, PN_Vector, #The start position of the hull trace.
		IN endPos, PN_Vector, #The end position of the hull trace.
		IN mins, PN_Vector, #The minimum coordinates of the hull.
		IN maxs, PN_Vector, #The maximum coordinates of the hull.
		IN damage=10, PN_Number, #The damage to be applied.
		IN damageFlags=DMG_GENERIC, PN_Enum, PNF_Bitfield, DMG, #Bitflag specifying the damage type, see DMG_ Enums.
		IN damageForce=10, PN_Number, #The force to be applied to the hit object.
		IN damageAllNPCs=true, PN_Bool, #Whether to apply damage to all hit NPCs or not.
		OUT entity, PN_Ref, PNF_None, Entity, #The hit entity
	}
	FUNC TranslateWeaponActivity, SHARED
	{
		DESC Translates ACT_ Enums according to the holdtype of players currently held weapon.
		IN act, PN_Enum, PNF_None, ACT, #The initial ACT_ Enums
		OUT translated, PN_Enum, PNF_None, ACT, #Translated ACT_ Enums
	}
	FUNC UnfreezePhysicsObjects, SHARED
	{
		DESC Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.
	}
	FUNC UniqueID, SHARED
	{
		DESC This function has collisions, where more than one player has the same UniqueID. It is highly recommended to use Player:AccountID, Player:SteamID or Player:SteamID64 instead, which are guaranteed to be unique to each player.
		OUT uniqueID, PN_Number, #The player's Unique ID
	}
	FUNC UniqueIDTable, SHARED
	{
		DESC Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.
		IN key, PN_Any, #Unique table key.
		OUT table, PN_Any, PNF_Table, #The table that contains any info you have put in it.
	}
	FUNC UnLock, SERVER
	{
		DESC Unlocks the player movement if locked previously. Will disable godmode for the player if locked previously.
	}
	FUNC UnSpectate, SERVER
	{
		DESC Stops the player from spectating another entity.
	}
	FUNC UserID, SHARED
	{
		DESC Returns the player's ID. You can use Player() to get the player by their ID.
		OUT id, PN_Number, #The player's user ID
	}
	FUNC ViewPunch, SHARED
	{
		DESC Simulates a push on the client's screen.
		IN PunchAngle, PN_Angles, #The angle in which to push the player's screen.
	}
	FUNC ViewPunchReset, SHARED
	{
		DESC Resets the player's view punch ( Player:ViewPunch ) effect back to normal.
		IN tolerance, PN_Number, PNF_Nullable, #Reset all ViewPunch below this threshold.
	}
	FUNC VoiceVolume, CLIENT
	{
		DESC Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.
		OUT volume, PN_Number, #The voice volume.
	}
}