LIB UTIL
{
	NOWIKIDOC
	PURE AngleVectors, SHARED
	{
		IN Angles, PN_Angles
		OUT Forward, PN_Vector
		OUT Right, PN_Vector
		OUT Up, PN_Vector
		CODE 
		{
			#1 = $1:Forward()
			#2 = $1:Right()
			#3 = $1:Up()
		}
		COMPACT false
	}
	FUNC SetEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		IN Value, PN_Any
		CODE
		{
			if IsValid($1) then 
				$1["!module_" .. $2] = $3 
			end
		}
	}
	PURE GetEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT HasValue, PN_Bool
		OUT Value, PN_Any
		CODE 
		{
			if IsValid($1) then 
				#1 = $1["!module_" .. $2] ~= nil #2 = $1["!module_" .. $2] 
			else 
				#1 = false #2 = nil 
			end
		}
	}
	FUNC ClearEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		CODE 
		{
			if IsValid($1) then 
				$1["!module_" .. $2] = nil 
			end
		}
	}
	PURE GetKeyValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT Value, PN_String
		CODE #1 = Entity_.GetKeyValues($1)[$2] or ""
	}
	PURE FindPlayerByName, SHARED
	{
		IN Name, PN_String
		OUT Player, PN_Ref, PNF_None, Player
		OUT Found, PN_Bool
		CODE
		{
			for _, pl in pairs(player.GetAll()) do 
			if pl:Nick():lower():find(($1):lower()) ~= nil then #1 = pl break end 
			end
			#2 = (#1 ~= nil)
		}
	}
	PURE ContainsString, SHARED
	{
		IN String, PN_String
		IN Find, PN_String
		OUT Result, PN_Bool
		CODE #1 = string.find($1, $2) ~= nil
	}
	FUNC MakeExplosion, SERVER
	{
		IN Owner, PN_Ref, PNF_Nullable, Entity
		IN Position, PN_Vector
		IN Damage, PN_Number
		LOCAL ent
		CODE
		{
			%ent = ents.Create("env_explosion")
			%ent:SetOwner($1)
			%ent:SetPos($2)
			%ent:Spawn()
			%ent:SetKeyValue("iMagnitude", $3)
			%ent:Fire("Explode")
		}
	}
	PURE TCLerp, SHARED
	{
		DESC Time corrected lerp, interpolates between A and B consistently regardless of framerate
		IN A, PN_Number, #Interpolate from this
		IN B, PN_Number, #Interpolate to this
		IN Rate = 1, PN_Number, #How fast to interpolate
		OUT Result, PN_Number
		CODE
		{
			#1 = Lerp(1 - math.exp(FrameTime() * -$3), $1, $2)
		}
	}
	FUNC AutoLerp, SHARED
	{
		DESC Automatically lerps toward the target value each time the function is called
		IN Target, PN_Number, #Target value to interpolate to
		IN Rate, PN_Number, #How fast to interpolate
		IN Reset, PN_Bool, #Reset internal lerped value to target
		OUT Value, PN_Number
		GLOBAL current
		CODE
		{
			if %current == nil or $3 then %current = $1 end
			%current = Lerp(1 - math.exp(FrameTime() * -$2), %current, $1)
			#1 = %current
		}
	}
	SPECIAL Animate, SHARED
	{
		DESC Test
		IN Start, PN_Exec
		IN Duration=1, PN_Number, #How long should the animation take place
		IN ToZero=true, PN_Bool, #If true, the value goes from 1 to 0, otherwise it's reversed (0 - 1)
		OUT Update, PN_Exec
		OUT Fraction, PN_Number, #The animated value
		GLOBAL time
		CODE
		{
			%time = $2
			__bpm.delay("thunk_!graph_!node", 0, function()
				%time = math.max(%time - FrameTime(), 0)
				local t = (%time / $2)
				#2 = $3 and t or (1 - t)
				recurse(#_1)
				if %time > 0 then return 0 end
			end)
			goto popcall
		}
	}
	SPECIAL HTTPFetch, SHARED
	{
		DESC Make a HTTP GET request
		IN Exec, PN_Exec
		IN url, PN_String
		OUT onSuccess, PN_Exec
		OUT body, PN_String
		OUT onFailure, PN_Exec
		OUT error, PN_String
		OUT code, PN_Number
		LATENT
		CODE
		{
			http.Fetch( $2,
				function( body, len, headers, code )
					#2 = body
					#5 = code
					recurse(#_1)
				end,
				function( error )
					#4 = error
					recurse(#_3)
				end
			)
			goto popcall
		}
	}
	SPECIAL HTTPPost, SHARED
	{
		DESC Make a HTTP POST request
		IN Exec, PN_Exec
		IN url, PN_String
		IN parameters, PN_Any, PNF_Table
		OUT onSuccess, PN_Exec
		OUT body, PN_String
		OUT onFailure, PN_Exec
		OUT error, PN_String
		OUT code, PN_Number
		LATENT
		CODE
		{
			http.Post( $2, $3,
				function( body, len, headers, code )
					#2 = body
					#5 = code
					recurse(#_1)
				end,
				function( error )
					#4 = error
					recurse(#_3)
				end
			)
			goto popcall
		}
	}
}