CALLBACK FuncConCommandCallback
{
	IN player, PN_Ref, PNF_None, Player
	IN command, PN_String
	IN args, PN_String, PNF_Table
	IN argStr, PN_String
}
CALLBACK FuncAutoComplete
{
	IN cmd, PN_String
	IN args, PN_String
}
LIB concommand
{
	FUNC Add, SHARED
	{
		DESC Creates a console command that runs a function in lua with optional autocompletion function and help text.
		IN name, PN_String, #The command name to be used in console. This cannot be a name of existing console command or console variable. It will silently fail if it is.
		IN callback, PN_Func, PNF_None, FuncConCommandCallback, #The function to run when the concommand is executed. Arguments passed are: Player ply - The player that ran the concommand. NULL entity if command was entered with the dedicated server console. string cmd - The concommand string (if one callback is used for several concommands). table args - A table of all string arguments. string argStr - The arguments as a string.
		IN autoComplete, PN_Func, PNF_Nullable, FuncAutoComplete, #The function to call which should return a table of options for autocompletion. (Autocompletion Tutorial) This only properly works on the client since it is not networked. Arguments passed are: string cmd - The concommand this autocompletion is for. string args - The arguments typed so far.
		IN helpText, PN_String, PNF_Nullable, #The text to display should a user run 'help cmdName'.
		IN flags, PN_Enum, PNF_Nullable, FCVAR, #Concommand modifier flags. See FCVAR_ Enums.
	}
}