LIB ents
{
	FUNC Create, SERVER
	{
		DESC Creates an entity. This function will fail and return NULL if the networked-edict limit is hit (around 8176), or the provided entity class doesn't exist.
		IN class, PN_String, #The classname of the entity to create
		OUT entity, PN_Ref, PNF_None, Entity, #The created entity, or NULL if failed
	}
	FUNC CreateClientProp, CLIENT
	{
		DESC Creates a clientside only prop. See also ClientsideModel.
		IN model=models/error.mdl, PN_String, PNF_Nullable, #The model for the entity to be created.
		OUT entity, PN_Ref, PNF_None, Entity, #Created entity.
	}
	FUNC CreateClientside, CLIENT
	{
		DESC Creates a clientside only scripted entity. The scripted entity must be of "anim" type.
		IN class, PN_String, #The class name of the entity to create.
		OUT entity, PN_Ref, PNF_None, Entity, #Created entity.
	}
	FUNC FindAlongRay, SHARED
	{
		DESC Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.
		IN start, PN_Vector, #The start position of the ray
		IN end, PN_Vector, #The end position of the ray
		IN mins, PN_Vector, PNF_Nullable, #The mins corner of the ray
		IN maxs, PN_Vector, PNF_Nullable, #The maxs corner of the ray
		OUT entites, PN_Ref, PNF_Table, Entity, #Table of the found entities.
	}
	FUNC FindByClass, SHARED
	{
		DESC Gets all entities with the given class, supports wildcards. This works internally by iterating over ents.GetAll. Even if internally ents.GetAll is used, It is faster to use ents.FindByClass than ents.GetAll with a single class comparison.
		IN class, PN_String, #The class of the entities to find.
		OUT entities, PN_Ref, PNF_Table, Entity, #A table containing all found entities
	}
	FUNC FindByClassAndParent, SHARED
	{
		DESC Finds all entities that are of given class and are children of given entity. This works internally by iterating over ents.GetAll.
		IN class, PN_String, #The class of entities to search for
		IN parent, PN_Ref, PNF_None, Entity, #Parent of entities that are being searched for
		OUT entites, PN_Ref, PNF_Table, Entity, #A table of found entities or nil if none are found
	}
	FUNC FindByModel, SHARED
	{
		DESC Gets all entities with the given model, supports wildcards. This works internally by iterating over ents.GetAll.
		IN model, PN_String, #The model of the entities to find.
		OUT entites, PN_Ref, PNF_Table, Entity, #A table of all found entities.
	}
	FUNC FindByName, SHARED
	{
		DESC Gets all entities with the given hammer targetname. This works internally by iterating over ents.GetAll.
		IN name, PN_String, #The targetname to look for
		OUT entities, PN_Ref, PNF_Table, Entity, #A table of all found entities
	}
	FUNC FindInBox, SHARED
	{
		DESC Returns all entities within the specified box.
		IN boxMins, PN_Vector, #The box minimum coordinates.
		IN boxMaxs, PN_Vector, #The box maximum coordinates.
		OUT entities, PN_Ref, PNF_Table, Entity, #A table of all found entities.
	}
	FUNC FindInCone, SHARED
	{
		DESC Finds and returns all entities within the specified cone. Only entities whose Entity:WorldSpaceCenter is within the cone are considered to be in it.
		IN origin, PN_Vector, #The tip of the cone.
		IN normal, PN_Vector, #Direction of the cone.
		IN range, PN_Number, #The range of the cone/box around the origin.
		IN angleCos, PN_Number, #The cosine of the angle between the center of the cone to its edges, which is half the overall angle of the cone.
		OUT entites, PN_Ref, PNF_Table, Entity, #A table of all found Entitys.
	}
	FUNC FindInPVS, SERVER
	{
		DESC Finds all entities that lie within a PVS.
		IN viewPoint, PN_Any, #Entity or Vector to find entities within the PVS of. If a player is given, this function will use the player's view entity.
		OUT entities, PN_Ref, PNF_Table, Entity, #The found Entitys.
	}
	FUNC FindInSphere, SHARED
	{
		DESC Gets all entities within the specified sphere.
		IN origin, PN_Vector, #Center of the sphere.
		IN radius, PN_Number, #Radius of the sphere.
		OUT entites, PN_Ref, PNF_Table, Entity, #A table of all found Entitys. Has a limit of 1024 entities.
	}
	FUNC FireTargets, SERVER
	{
		DESC Fires a use event.
		IN target, PN_String, #Name of the target entity.
		IN activator, PN_Ref, PNF_None, Entity, #Activator of the event.
		IN caller, PN_Ref, PNF_None, Entity, #Caller of the event.
		IN usetype, PN_Enum, PNF_None, USE, #Use type. See the USE_ Enums.
		IN value, PN_Number, #This value is passed to ENTITY:Use, but isn't used by any default entities in the engine.
	}
	PURE GetAll, SHARED
	{
		DESC Returns a table of all existing entities.
		OUT entities, PN_Ref, PNF_Table, Entity, #Table of all existing Entitys.
	}
	PURE GetByIndex, SHARED
	{
		DESC Returns an entity by its index. Same as Entity.
		IN index, PN_Number, #The index of the entity.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity if it exists.
	}
	PURE GetCount, SHARED
	{
		DESC Gives you the amount of currently existing entities. Similar to #ents.GetAll but with much better performance.
		IN IncludeKillMe=false, PN_Bool, PNF_Nullable, #Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.
		OUT count, PN_Number, #Number of entities
	}
	PURE GetEdictCount, SERVER
	{
		DESC Returns the amount of networked entities, which is limited to 8192. ents.Create will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.
		OUT count, PN_Number, #Number of networked entities
	}
	PURE GetMapCreatedEntity, SERVER
	{
		DESC Returns entity that has given Entity:MapCreationID.
		IN id, PN_Number, #Entity's creation id
		OUT entity, PN_Ref, PNF_None, Entity, #Found entity
	}
}