LIB cam
{
	FUNC ApplyShake, CLIENT
	{
		DESC Shakes the screen at a certain position.
		IN pos, PN_Vector, #Origin of the shake.
		IN angles, PN_Angles, #Angles of the shake.
		IN factor, PN_Number, #The shake factor.
	}
	FUNC Start3D, CLIENT
	{
		DESC Sets up a new 3D rendering context. Must be finished by cam.End3D.
		IN pos, PN_Vector, PNF_Nullable, #Render cam position.
		IN angles, PN_Angles, PNF_Nullable, #Render cam angles.
		IN fov, PN_Number, PNF_Nullable, #Field of view.
		IN x, PN_Number, PNF_Nullable, #X coordinate of where to start the new view port.
		IN y, PN_Number, PNF_Nullable, #Y coordinate of where to start the new view port.
		IN w, PN_Number, PNF_Nullable, #Width of the new viewport.
		IN h, PN_Number, PNF_Nullable, #Height of the new viewport.
		IN zNear, PN_Number, PNF_Nullable, #Distance to near clipping plane.
		IN zFar, PN_Number, PNF_Nullable, #Distance to far clipping plane.
		DEPRECATED
	}
	FUNC Start3D2D, CLIENT
	{
		DESC Sets up a new 2D rendering context. Must be finished by cam.End3D2D.
		IN pos, PN_Vector, #Origin of the 3D2D context, ie. the top left corner, (0, 0).
		IN angles, PN_Angles, #Angles of the 3D2D context. +x in the 2d context corresponds to +x of the angle (its forward direction). +y in the 2d context corresponds to -y of the angle (its right direction). If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).
		IN scale, PN_Number, #The scale of the render context. If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.
		DEPRECATED
	}
	FUNC StartOrthoView, CLIENT
	{
		DESC Sets up a new 3d context using orthographic projection.
		IN leftOffset, PN_Number, #The left plane offset.
		IN topOffset, PN_Number, #The top plane offset.
		IN rightOffset, PN_Number, #The right plane offset.
		IN bottomOffset, PN_Number, #The bottom plane offset.
		DEPRECATED
	}
	SPECIAL IgnoreZ, CLIENT
	{
		DESC Tells the renderer to ignore the depth buffer and draw any upcoming operation "ontop" of everything that was drawn yet.
		IN Exec, PN_Exec
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.IgnoreZ(true) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.IgnoreZ(false) #1
	}
	SPECIAL Advanced, CLIENT
	{
		DESC Sets up a new rendering context. This is an extended version of cam.Start3D and cam.Start2D.
		IN Exec, PN_Exec
		IN data, PN_Struct, PNF_None, RenderCamData, #Render context config. See RenderCamData structure.
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.Start($2) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.End() #1
	}
	SPECIAL 2D, CLIENT
	{
		DESC Sets up a new 2D rendering context.
		IN Exec, PN_Exec
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.Start2D() pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.End2D() #1
	}
	SPECIAL 3D2D, CLIENT
	{
		DESC Sets up a new 2D rendering context.
		IN Exec, PN_Exec
		IN pos, PN_Vector, #Origin of the 3D2D context, ie. the top left corner, (0, 0).
		IN angles, PN_Angles, #Angles of the 3D2D context. +x in the 2d context corresponds to +x of the angle (its forward direction). +y in the 2d context corresponds to -y of the angle (its right direction). If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).
		IN scale=1, PN_Number, #The scale of the render context. If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.Start3D2D($2, $3, $4) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.End3D2D() #1
	}
	SPECIAL 3D, CLIENT
	{
		DESC Sets up a new 3D rendering context.
		IN Exec, PN_Exec
		IN pos, PN_Vector, PNF_Nullable, #Render cam position.
		IN angles, PN_Angles, PNF_Nullable, #Render cam angles.
		IN fov, PN_Number, PNF_Nullable, #Field of view.
		IN x, PN_Number, PNF_Nullable, #X coordinate of where to start the new view port.
		IN y, PN_Number, PNF_Nullable, #Y coordinate of where to start the new view port.
		IN w, PN_Number, PNF_Nullable, #Width of the new viewport.
		IN h, PN_Number, PNF_Nullable, #Height of the new viewport.
		IN zNear, PN_Number, PNF_Nullable, #Distance to near clipping plane.
		IN zFar, PN_Number, PNF_Nullable, #Distance to far clipping plane.
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.Start3D($2, $3, $4, $5, $6, $7, $8, $9, $10) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.End3D() #1
	}
	SPECIAL OrthoView, CLIENT
	{
		DESC Sets up a new 3d context using orthographic projection.
		IN Exec, PN_Exec
		IN leftOffset, PN_Number, #The left plane offset.
		IN topOffset, PN_Number, #The top plane offset.
		IN rightOffset, PN_Number, #The right plane offset.
		IN bottomOffset, PN_Number, #The bottom plane offset.
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.StartOrthoView($2, $3, $4, $5) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.EndOrthoView() #1
	}
	SPECIAL Matrix, CLIENT
	{
		DESC Sets up a new 3d context using orthographic projection.
		IN Exec, PN_Exec
		IN matrix, PN_Ref, PNF_None, VMatrix, #The matrix to push.
		OUT Thru, PN_Exec
		OUT Draw, PN_Exec
		JUMP finish
		CODE cam.PushModelMatrix($2) pushjmp(^_finish) ip = #_2 goto jumpto ::^finish:: cam.PopModelMatrix() #1
	}
}