LIB constraint
{
	FUNC AddConstraintTable, SERVER
	{
		DESC Stores information about constraints in an entity's table.
		IN ent1, PN_Ref, PNF_None, Entity, #The entity to store the information on.
		IN constrt, PN_Ref, PNF_None, Entity, #The constraint to store in the entity's table.
		IN ent2, PN_Ref, PNF_Nullable, Entity, #Optional. If different from ent1, the info will also be stored in the table for this entity.
		IN ent3, PN_Ref, PNF_Nullable, Entity, #Optional. Same as ent2.
		IN ent4, PN_Ref, PNF_Nullable, Entity, #Optional. Same as ent2.
	}
	FUNC AddConstraintTableNoDelete, SERVER
	{
		DESC Stores info about the constraints on the entity's table. The only difference between this and constraint.AddConstraintTable is that the constraint does not get deleted when the entity is removed.
		IN ent1, PN_Ref, PNF_None, Entity, #The entity to store the information on.
		IN constrt, PN_Ref, PNF_None, Entity, #The constraint to store in the entity's table.
		IN ent2, PN_Ref, PNF_Nullable, Entity, #Optional. If different from ent1, the info will also be stored in the table for this entity.
		IN ent3, PN_Ref, PNF_Nullable, Entity, #Optional. Same as ent2.
		IN ent4, PN_Ref, PNF_Nullable, Entity, #Optional. Same as ent2.
	}
	FUNC AdvBallsocket, SERVER
	{
		DESC Creates an advanced ballsocket (ragdoll) constraint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector, #Position on the first entity, in its local space coordinates.
		IN LPos2, PN_Vector, #Position on the second entity, in its local space coordinates.
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable)
		IN torquelimit, PN_Number, #Amount of torque (rotation speed) until it breaks (0 = unbreakable)
		IN xmin, PN_Number, #Minimum angle in rotations around the X axis local to the constraint.
		IN ymin, PN_Number, #Minimum angle in rotations around the Y axis local to the constraint.
		IN zmin, PN_Number, #Minimum angle in rotations around the Z axis local to the constraint.
		IN xmax, PN_Number, #Maximum angle in rotations around the X axis local to the constraint.
		IN ymax, PN_Number, #Maximum angle in rotations around the Y axis local to the constraint.
		IN zmax, PN_Number, #Maximum angle in rotations around the Z axis local to the constraint.
		IN xfric, PN_Number, #Rotational friction in the X axis local to the constraint.
		IN yfric, PN_Number, #Rotational friction in the Y axis local to the constraint.
		IN zfric, PN_Number, #Rotational friction in the Z axis local to the constraint.
		IN onlyrotation, PN_Number, #Only limit rotation, free movement.
		IN nocollide, PN_Number, #Whether the entities should be no-collided.
		OUT constraint, PN_Ref, PNF_None, Entity, #A phys_ragdollconstraint entity. Will return false if the constraint could not be created.
	}
	FUNC Axis, SERVER
	{
		DESC Creates an axis constraint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector, #Position on the first entity, in its local space coordinates.
		IN LPos2, PN_Vector, #Position on the second entity, in its local space coordinates.
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable)
		IN torquelimit, PN_Number, #Amount of torque (rotational force) until it breaks (0 = unbreakable)
		IN friction, PN_Number, #Constraint friction.
		IN nocollide, PN_Number, #Whether the entities should be no-collided.
		IN LocalAxis, PN_Vector, #If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.
		IN DontAddTable, PN_Bool, #Whether or not to add the constraint info on the entity table. See constraint.AddConstraintTable.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
	}
	FUNC Ballsocket, SERVER
	{
		DESC Creates a ballsocket joint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LocalPos, PN_Vector, #Centerposition of the joint, relative to the second entity.
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable)
		IN torquelimit, PN_Number, #Amount of torque (rotation speed) until it breaks (0 = unbreakable)
		IN nocollide, PN_Number, #Whether the entities should be nocollided
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
	}
	PURE CanConstrain, SERVER
	{
		DESC Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN bone, PN_Number, #The bone of the entity to check (use 0 for mono boned ents)
		OUT canConstrain, PN_Bool, #shouldConstrain
	}
	FUNC CreateKeyframeRope, SERVER
	{
		DESC Creates a rope without any constraint
		IN pos, PN_Vector
		IN width, PN_Number
		IN material, PN_String
		IN Constraint, PN_Ref, PNF_None, Entity
		IN Ent1, PN_Ref, PNF_None, Entity
		IN LPos1, PN_Vector
		IN Bone1, PN_Number
		IN Ent2, PN_Ref, PNF_None, Entity
		IN LPos2, PN_Vector
		IN Bone2, PN_Number
		IN kv, PN_Any, PNF_Table
		OUT rope, PN_Ref, PNF_None, Entity, #rope
	}
	FUNC CreateStaticAnchorPoint, SERVER
	{
		DESC Creates an invisible, non-moveable anchor point in the world to which things can be attached.
		IN pos, PN_Vector, #The position to spawn the anchor at
		OUT anchor, PN_Ref, PNF_None, Entity, #anchor
		OUT physObj, PN_Ref, PNF_None, PhysObj, #physicsObject,
		OUT bone, PN_Number, #bone
		OUT localPos, PN_Vector, #LPos
	}
	FUNC Elastic, SERVER
	{
		DESC Creates an elastic constraint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector, #Position of first end of the rope. Local to Ent1.
		IN LPos2, PN_Vector, #Position of second end of the rope. Local to Ent2.
		IN constant, PN_Number
		IN damping, PN_Number
		IN rdamping, PN_Number
		IN material, PN_String, #The material of the rope.
		IN width, PN_Number, #Width of rope.
		IN stretchonly, PN_Bool
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if the constraint could not be created.
	}
	PURE Find, SERVER
	{
		DESC Returns the constraint of a specified type between two entities, if it exists
		IN ent1, PN_Ref, PNF_None, Entity, #The first entity to check
		IN ent2, PN_Ref, PNF_None, Entity, #The second entity to check
		IN type, PN_String, #The constraint type to look for (eg. "Weld", "Elastic", "NoCollide")
		IN bone1, PN_Number, #The bone number for the first entity (0 for monoboned entities)
		IN bone2, PN_Number, #The bone number for the second entity
		OUT constraint, PN_Ref, PNF_None, Entity, #constraint
	}
	PURE FindConstraint, SERVER
	{
		DESC Returns the first constraint of a specific type directly connected to the entity found
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN type, PN_String, #The type of constraint (eg. "Weld", "Elastic", "NoCollide")
		OUT constraint, PN_Any, PNF_Table, #The constraint table, set with constraint.AddConstraintTable
	}
	PURE FindConstraintEntity, SERVER
	{
		DESC Returns the other entity involved in the first constraint of a specific type directly connected to the entity
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN type, PN_String, #The type of constraint (eg. "Weld", "Elastic", "NoCollide")
		OUT entity, PN_Ref, PNF_None, Entity, #The other entity.
	}
	PURE FindConstraints, SERVER
	{
		DESC Returns a table of all constraints of a specific type directly connected to the entity
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN type, PN_String, #The type of constraint (eg. "Weld", "Elastic", "NoCollide")
		OUT constraints, PN_Ref, PNF_Table, Entity, #All the constraints of this entity.
	}
	FUNC ForgetConstraints, SERVER
	{
		DESC Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.
		IN ent, PN_Ref, PNF_None, Entity, #The entity that will forget its constraints.
	}
	PURE GetAllConstrainedEntities, SERVER
	{
		DESC Returns a table of all entities recursively constrained to an entitiy.
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN ResultTable, PN_Ref, PNF_Nullable|PNF_Table, Entity, #Table used to return result. Optional.
		OUT entites, PN_Ref, PNF_Table, Entity, #A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc.
	}
	PURE GetTable, SERVER
	{
		DESC Returns a table of all constraints directly connected to the entity
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		OUT constraints, PN_Ref, PNF_Table, Entity, #A list of all constraints connected to the entity.
	}
	PURE HasConstraints, SERVER
	{
		DESC Returns true if the entity has constraints attached to it
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		OUT hasConstraints, PN_Bool, #Whether the entity has any constraints or not.
	}
	FUNC Hydraulic, SERVER
	{
		DESC Creates a Hydraulic constraint.
		IN pl, PN_Ref, PNF_None, Player, #The player that will be used to call numpad.OnDown.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls),
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls).
		IN LPos1, PN_Vector
		IN LPos2, PN_Vector
		IN Length1, PN_Number
		IN Length2, PN_Number
		IN width, PN_Number, #The width of the rope.
		IN key, PN_Enum, PNF_None, KEY, #The key binding, corresponding to an KEY_ Enums
		IN fixed, PN_Number, #Whether the hydraulic is fixed.
		IN speed, PN_Number
		IN material, PN_String, #The material of the rope.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if the constraint could not be created.
		OUT controller, PN_Ref, PNF_None, Entity, #controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.
		OUT slider, PN_Ref, PNF_None, Entity, #slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.
	}
	FUNC Keepupright, SERVER
	{
		DESC Creates a keep upright constraint.
		IN ent, PN_Ref, PNF_None, Entity, #The entity to keep upright
		IN ang, PN_Angles, #The angle defined as "upright"
		IN bone, PN_Number, #The bone of the entity to constrain (0 for boneless)
		IN angularLimit, PN_Number, #Basically, the strength of the constraint
		OUT constraint, PN_Ref, PNF_None, Entity, #The created constraint, if any or false if the constraint failed to set
	}
	FUNC Motor, SERVER
	{
		DESC Creates a motor constraint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector
		IN LPos2, PN_Vector
		IN friction, PN_Number
		IN torque, PN_Number
		IN forcetime, PN_Number
		IN nocollide, PN_Number, #Whether the entities should be no-collided.
		IN toggle, PN_Number, #Whether the constraint is on toggle.
		IN pl, PN_Ref, PNF_None, Player, #The player that will be used to call numpad.OnDown and numpad.OnUp.
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable)
		IN numpadkey_fwd, PN_Enum, PNF_None, KEY, #The key binding for "forward", corresponding to an KEY_ Enums
		IN numpadkey_bwd, PN_Enum, PNF_None, KEY, #The key binding for "backwards", corresponding to an KEY_ Enums
		IN direction, PN_Number
		IN LocalAxis, PN_Vector
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
		OUT axis, PN_Ref, PNF_None, Entity, #axis. Will return nil if the constraint could not be created.
	}
	FUNC Muscle, SERVER
	{
		DESC Creates a muscle constraint.
		IN pl, PN_Ref, PNF_None, Player, #The player that will be used to call numpad.OnDown.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector
		IN LPos2, PN_Vector
		IN Length1, PN_Number
		IN Length2, PN_Number
		IN width, PN_Number, #Width of the rope.
		IN key, PN_Enum, PNF_None, KEY, #The key binding, corresponding to an KEY_ Enums
		IN fixed, PN_Number, #Whether the constraint is fixed.
		IN period, PN_Number
		IN amplitude, PN_Number
		IN starton, PN_Bool
		IN material, PN_String, #Material of the rope.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if the constraint could not be created.
		OUT controller, PN_Ref, PNF_None, Entity, #controller. Will return nil if the constraint could not be created.
		OUT slider, PN_Ref, PNF_None, Entity, #slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.
	}
	FUNC NoCollide, SERVER
	{
		DESC Creates an no-collide "constraint". Disables collision between two entities.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls).
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls).
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
	}
	FUNC Pulley, SERVER
	{
		DESC Creates a pulley constraint.
		IN Ent1, PN_Ref, PNF_None, Entity
		IN Ent4, PN_Ref, PNF_None, Entity
		IN Bone1, PN_Number
		IN Bone4, PN_Number
		IN LPos1, PN_Vector
		IN LPos4, PN_Vector
		IN WPos2, PN_Vector
		IN WPos3, PN_Vector
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable)
		IN rigid, PN_Bool, #Whether the constraint is rigid.
		IN width, PN_Number, #Width of the rope.
		IN material, PN_String, #Material of the rope.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
	}
	FUNC RemoveAll, SERVER
	{
		DESC Attempts to remove all constraints associated with an entity
		IN ent, PN_Ref, PNF_None, Entity, #The entity to remove constraints from
		OUT success, PN_Bool, #Whether any constraints were removed
		OUT count, PN_Number, #Number of constraints removed
	}
	FUNC RemoveConstraints, SERVER
	{
		DESC Attempts to remove all constraints of a specified type associated with an entity
		IN ent, PN_Ref, PNF_None, Entity, #The entity to check
		IN type, PN_String, #The constraint type to remove (eg. "Weld", "Elastic", "NoCollide")
		OUT success, PN_Bool, #Whether we removed any constraints or not
		OUT count, PN_Number, #The amount of constraints removed
	}
	FUNC Rope, SERVER
	{
		DESC Creates a rope constraint - with rope!
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls)
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls)
		IN LPos1, PN_Vector, #Position of first end of the rope. Local to Ent1.
		IN LPos2, PN_Vector, #Position of second end of the rope. Local to Ent2.
		IN length, PN_Number, #Length of the rope.
		IN addlength, PN_Number, #Amount to add to the length of the rope. Works as it does in the Rope tool.
		IN forcelimit, PN_Number, #Amount of force until it breaks (0 = unbreakable).
		IN width, PN_Number, #Width of the rope.
		IN material, PN_String, #Material of the rope.
		IN rigid, PN_Bool, #Whether the constraint is rigid.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if "Constraint" is a keyframe_rope or if the constraint could not be created.
	}
	FUNC Slider, SERVER
	{
		DESC Creates a slider constraint.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls),
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls).
		IN LPos1, PN_Vector
		IN LPos2, PN_Vector
		IN width, PN_Number, #The width of the rope.
		IN material, PN_String, #The material of the rope.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if the constraint could not be created.
	}
	FUNC Weld, SERVER
	{
		DESC Creates a weld constraint
		IN ent1, PN_Ref, PNF_None, Entity, #The first entity
		IN ent2, PN_Ref, PNF_None, Entity, #The second entity
		IN bone1, PN_Number, #The bonenumber of the first entity (0 for monoboned entities) PhysObj number for ragdolls, see: Entity:TranslateBoneToPhysBone.
		IN bone2, PN_Number, #The bonenumber of the second entity
		IN forcelimit, PN_Number, #The amount of force appliable to the constraint before it will break (0 is never)
		IN nocollide, PN_Bool, #Should ent1 be nocollided to ent2 via this constraint
		IN deleteent1onbreak, PN_Bool, #If true, when ent2 is removed, ent1 will also be removed
		OUT constraint, PN_Ref, PNF_None, Entity, #constraint
	}
	FUNC Winch, SERVER
	{
		DESC Creates a Winch constraint.
		IN pl, PN_Ref, PNF_None, Player, #The player that will be used to call numpad.OnDown and numpad.OnUp.
		IN Ent1, PN_Ref, PNF_None, Entity, #First entity.
		IN Ent2, PN_Ref, PNF_None, Entity, #Second entity.
		IN Bone1, PN_Number, #Bone of first entity (0 for non-ragdolls),
		IN Bone2, PN_Number, #Bone of second entity (0 for non-ragdolls).
		IN LPos1, PN_Vector
		IN LPos2, PN_Vector
		IN width, PN_Number, #The width of the rope.
		IN fwd_bind, PN_Enum, PNF_None, KEY, #The key binding for "forward", corresponding to an KEY_ Enums
		IN bwd_bind, PN_Enum, PNF_None, KEY, #The key binding for "backwards", corresponding to an KEY_ Enums
		IN fwd_speed, PN_Number, #Forward speed.
		IN bwd_speed, PN_Number, #Backwards speed.
		IN material, PN_String, #The material of the rope.
		IN toggle, PN_Bool, #Whether the winch should be on toggle.
		OUT constraint, PN_Ref, PNF_None, Entity, #Constraint. Can return nil. Will return false if the constraint could not be created.
		OUT rope, PN_Ref, PNF_None, Entity, #rope. Will return nil if the constraint could not be created.
		OUT constroller, PN_Ref, PNF_None, Entity, #controller. Can return nil.
	}
}