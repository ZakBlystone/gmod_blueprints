LIB math
{
	PURE abs, SHARED
	{
		DESC Calculates the absolute value of a number (effectively removes any negative sign).
		IN x, PN_Number, #The number to get the absolute value of.
		OUT result, PN_Number, #absolute_value
	}
	PURE acos, SHARED
	{
		DESC Returns the arc cosine of the given number.
		IN cos, PN_Number, #Cosine value in range of -1 to 1.
		OUT result, PN_Number, #An angle in radians, between 0 and pi, which has the given cos value. nan if the argument is out of range.
	}
	PURE AngleDifference, SHARED
	{
		DESC Calculates the difference between two angles.
		IN a, PN_Number, #The first angle.
		IN b, PN_Number, #The second angle.
		OUT result, PN_Number, #The difference between the angles between -180 and 180
	}
	PURE Approach, SHARED
	{
		DESC Gradually approaches the target value by the specified amount.
		IN current, PN_Number, #The value we're currently at.
		IN target, PN_Number, #The target value. This function will never overshoot this value.
		IN change, PN_Number, #The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)
		OUT result, PN_Number, #New current value, closer to the target than it was previously.
	}
	PURE ApproachAngle, SHARED
	{
		DESC Increments an angle towards another by specified rate.
		IN currentAngle, PN_Number, #The current angle to increase
		IN targetAngle, PN_Number, #The angle to increase towards
		IN rate, PN_Number, #The amount to approach the target angle by
		OUT result, PN_Number, #Modified angle
	}
	PURE asin, SHARED
	{
		DESC Returns the arc sine of the given number.
		IN normal, PN_Number, #Sine value in the range of -1 to 1.
		OUT result, PN_Number, #An angle in radians, in the range -pi/2 to pi/2, which has the given sine value. nan if the argument is out of range.
	}
	PURE atan, SHARED
	{
		DESC Returns the arc tangent of the given number.
		IN normal, PN_Number, #Tangent value.
		OUT result, PN_Number, #An angle in radians, in the range -pi/2 to pi/2, which has the given tangent.
	}
	PURE atan2, SHARED
	{
		DESC atan2 functions like math.atan(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.
		IN y, PN_Number, #Y coordinate.
		IN x, PN_Number, #X coordinate.
		OUT result, PN_Number, #The angle of the line from (0, 0) to (x, y) in radians, in the range -pi to pi.
	}
	PURE BinToInt, SHARED
	{
		DESC Converts a binary string into a number.
		IN string, PN_String, #Binary string to convert
		OUT result, PN_Number, #Base 10 number.
	}
	PURE BSplinePoint, SHARED
	{
		DESC Basic code for BÃ©zier-Spline algorithm.
		IN tDiff, PN_Number, #From 0 to 1, where alongside the spline the point will be.
		IN tPoints, PN_Vector, PNF_Table, #A table of Vectors. The amount cannot be less than 4.
		IN tMax, PN_Number, #Just leave this at 1.
		OUT result, PN_Vector, #Point on Bezier curve, related to tDiff.
	}
	PURE calcBSplineN, SHARED
	{
		DESC Basic code for Bezier-Spline algorithm, helper function for math.BSplinePoint.
		IN i, PN_Number
		IN k, PN_Number, #BUG	 Sending in a value < 1 will result in an infinite loop. Pull Request: #1477
		IN t, PN_Number
		IN tinc, PN_Number
		OUT result, PN_Number
	}
	PURE ceil, SHARED
	{
		DESC Ceils or rounds a number up.
		IN number, PN_Number, #The number to be rounded up.
		OUT result, PN_Number, #ceiled numbers
	}
	PURE Clamp, SHARED
	{
		DESC Clamps a number between a minimum and maximum value
		IN input, PN_Number, #The number to clamp.
		IN min, PN_Number, #The minimum value, this function will never return a number less than this.
		IN max, PN_Number, #The maximum value, this function will never return a number greater than this.
		OUT result, PN_Number, #The clamped value.
	}
	PURE cos, SHARED
	{
		DESC Returns the cosine of given angle.
		IN number, PN_Number, #Angle in radians
		OUT result, PN_Number, #Cosine of given angle
	}
	PURE cosh, SHARED
	{
		DESC Returns the hyperbolic cosine of the given angle.
		IN number, PN_Number, #Angle in radians.
		OUT result, PN_Number, #The hyperbolic cosine of the given angle.
	}
	PURE deg, SHARED
	{
		DESC Converts radians to degrees.
		IN radians, PN_Number, #Value to be converted to degrees.
		OUT degrees, PN_Number, #degrees
	}
	PURE Dist, SHARED
	{
		DESC Returns the difference between two points in 2D space. Alias of math.Distance.
		IN x1, PN_Number, #X position of first point
		IN y1, PN_Number, #Y position of first point
		IN x2, PN_Number, #X position of second point
		IN y2, PN_Number, #Y position of second point
		OUT result, PN_Number, #Distance between the two points.
	}
	PURE Distance, SHARED
	{
		DESC Returns the difference between two points in 2D space.
		IN x1, PN_Number, #X position of first point
		IN y1, PN_Number, #Y position of first point
		IN x2, PN_Number, #X position of second point
		IN y2, PN_Number, #Y position of second point
		OUT result, PN_Number, #Distance between the two points
	}
	PURE EaseInOut, SHARED
	{
		DESC Calculates the progress of a value fraction, taking in to account given easing fractions
		IN progress, PN_Number, #Fraction of the progress to ease
		IN easeIn, PN_Number, #Fraction of how much easing to begin with
		IN easeOut, PN_Number, #Fraction of how much easing to end with
		OUT result, PN_Number, #Eased Value
	}
	PURE exp, SHARED
	{
		DESC Returns the x power of the Euler constant e.
		IN exponent, PN_Number, #The exponent for the function.
		OUT result, PN_Number, #e to the specified power
	}
	PURE floor, SHARED
	{
		DESC Floors or rounds a number down.
		IN number, PN_Number, #The number to be rounded down.
		OUT result, PN_Number, #floored numbers
	}
	PURE fmod, SHARED
	{
		DESC Returns the modulus of the specified values.
		IN base, PN_Number, #The base value.
		IN modulator, PN_Number, #The modulator.
		OUT result, PN_Number, #The calculated modulus.
	}
	PURE frexp, SHARED
	{
		DESC Used to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range 1/2 (inclusive) to 1 (exclusive) and the second is an integer exponent.
		IN x, PN_Number, #The value to get the normalized fraction and the exponent from.
		OUT multiplier, PN_Number, #m, multiplier - between 0.5 and 1
		OUT exponent, PN_Number, #e, exponent - always an integer
	}
	PURE IntToBin, SHARED
	{
		DESC Converts an integer to a binary (base-2) string.
		IN int, PN_Number, #Number to be converted.
		OUT result, PN_String, #Binary number string. The length of this will always be a multiple of 3.
	}
	PURE ldexp, SHARED
	{
		DESC Takes a normalised number and returns the floating point representation.
		IN normalizedFraction, PN_Number, #The value to get the normalized fraction and the exponent from.
		IN exponent, PN_Number, #The value to get the normalized fraction and the exponent from.
		OUT result, PN_Number, #result
	}
	PURE log, SHARED
	{
		DESC With one argument, return the natural logarithm of x (to base e).
		IN x, PN_Number, #The value to get the base from exponent from.
		IN base, PN_Number, PNF_Nullable, #The logarithmic base.
		OUT result, PN_Number, #Logarithm of x to the given base
	}
	PURE log10, SHARED
	{
		DESC Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).
		IN x, PN_Number, #The value to get the base from exponent from.
		OUT result, PN_Number
	}
	PURE max, SHARED
	{
		DESC Returns the largest value of all arguments.
		IN a, PN_Number
		IN b, PN_Number
		OUT result, PN_Number, #The largest number
	}
	PURE min, SHARED
	{
		DESC Returns the smallest value of all arguments.
		IN a, PN_Number
		IN b, PN_Number
		OUT result, PN_Number, #The smallest number
	}
	PURE mod, SHARED
	{
		DESC Returns the modulus of the specified values. Same as math.fmod.
		IN base, PN_Number, #The base value
		IN modulator, PN_Number, #Modulator
		OUT result, PN_Number, #The calculated modulus
	}
	PURE modf, SHARED
	{
		DESC Returns the integral and fractional component of the modulo operation.
		IN base, PN_Number, #The base value.
		OUT integral, PN_Number, #The integral component.
		OUT frational, PN_Number, #The fractional component.
	}
	PURE NormalizeAngle, SHARED
	{
		DESC Normalizes angle, so it returns value between -180 and 180.
		IN angle, PN_Number, #The angle to normalize, in degrees.
		OUT normalized, PN_Number, #The normalized angle, in the range of -180 to 180 degrees.
	}
	PURE pow, SHARED
	{
		DESC Returns x raised to the power y. In particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.
		IN x, PN_Number, #Base.
		IN y, PN_Number, #Exponent.
		OUT result, PN_Number, #y power of x
	}
	PURE rad, SHARED
	{
		DESC Converts an angle in degrees to it's equivalent in radians.
		IN degrees, PN_Number, #The angle measured in degrees.
		OUT radians, PN_Number, #radians
	}
	PURE Rand, SHARED
	{
		DESC Returns a random float between min and max.
		IN min, PN_Number, #The minimum value.
		IN max, PN_Number, #The maximum value.
		OUT result, PN_Number, #Random float between min and max.
	}
	PURE random, SHARED
	{
		DESC When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
		IN min, PN_Number, PNF_Nullable, #If m is the only parameter: upper limit. If n is also provided: lower limit. If provided, this must be an integer.
		IN max, PN_Number, PNF_Nullable, #Upper limit. If provided, this must be an integer.
		OUT result, PN_Number, #Random value
	}
	FUNC randomseed, SHARED
	{
		PROTECTED
		DESC Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with math.random.
		IN seed, PN_Number, #The new seed
	}
	PURE Remap, SHARED
	{
		DESC Remaps the value from one range to another
		IN value, PN_Number, #The value
		IN inMin, PN_Number, #The minimum of the initial range
		IN inMax, PN_Number, #The maximum of the initial range
		IN outMin, PN_Number, #The minimum of new range
		IN outMax, PN_Number, #The maximum of new range
		OUT result, PN_Number, #The number in the new range
	}
	PURE Round, SHARED
	{
		DESC Rounds the given value to the nearest whole number or to the given decimal places.
		IN value, PN_Number, #The value to round.
		IN decimals, PN_Number, PNF_Nullable, #The decimal places to round to.
		OUT result, PN_Number, #The rounded value.
	}
	PURE sin, SHARED
	{
		DESC Returns the sine of given angle.
		IN number, PN_Number, #Angle in radians
		OUT result, PN_Number, #Sine for given angle
	}
	PURE sinh, SHARED
	{
		DESC Returns the hyperbolic sine of the given angle.
		IN number, PN_Number, #Angle in radians.
		OUT result, PN_Number, #The hyperbolic sine of the given angle.
	}
	PURE sqrt, SHARED
	{
		DESC Returns the square root of the number.
		IN value, PN_Number, #Value to get the square root of.
		OUT result, PN_Number, #squareRoot
	}
	PURE tan, SHARED
	{
		DESC Returns the tangent of the given angle.
		IN value, PN_Number, #Angle in radians
		OUT result, PN_Number, #The tangent of the given angle.
	}
	PURE tanh, SHARED
	{
		DESC Returns the hyperbolic tangents of the given number.
		IN number, PN_Number, #Angle in radians.
		OUT result, PN_Number, #The hyperbolic tangent of the given angle.
	}
	PURE TimeFraction, SHARED
	{
		DESC Returns the fraction of where the current time is relative to the start and end times
		IN start, PN_Number, #Start time in seconds
		IN end, PN_Number, #End time in seconds
		IN current, PN_Number, #Current time in seconds
		OUT result, PN_Number, #Fraction
	}
	PURE Truncate, SHARED
	{
		DESC Rounds towards zero.
		IN num, PN_Number, #The number to truncate
		IN digits, PN_Number, PNF_Nullable, #The amount of digits to keep after the point.
	}
	PURE Huge, SHARED
	{
		DESC Returns infinity.
		OUT value, PN_Number, #Infinity
		CODE #1 = math.huge
	}
}