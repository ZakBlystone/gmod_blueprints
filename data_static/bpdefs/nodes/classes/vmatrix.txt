CLASS VMatrix
{
	PURE GetAngles, SHARED
	{
		DESC Returns the absolute rotation of the matrix.
		OUT angles, PN_Angles, #Absolute rotation of the matrix
	}
	PURE GetField, SHARED
	{
		DESC Returns a specific field in the matrix.
		IN row, PN_Number, #Row of the field whose value is to be retrieved, from 1 to 4
		IN column, PN_Number, #Column of the field whose value is to be retrieved, from 1 to 4
		OUT value, PN_Number, #The value of the specified field
	}
	PURE GetForward, SHARED
	{
		DESC Gets the forward direction of the matrix.
		OUT forward, PN_Vector, #The forward direction of the matrix.
	}
	PURE GetInverse, SHARED
	{
		DESC Returns an inverted matrix without modifying the original matrix.
		OUT inverse, PN_Ref, PNF_None, VMatrix, #The inverted matrix if possible, nil otherwise
	}
	PURE GetInverseTR, SHARED
	{
		DESC Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
		OUT inverse, PN_Ref, PNF_None, VMatrix, #The inverted matrix.
	}
	PURE GetRight, SHARED
	{
		DESC Gets the right direction of the matrix.
		OUT right, PN_Vector, #The right direction of the matrix.
	}
	PURE GetScale, SHARED
	{
		DESC Returns the absolute scale of the matrix.
		OUT scale, PN_Vector, #Absolute scale of the matrix
	}
	PURE GetTranslation, SHARED
	{
		DESC Returns the absolute translation of the matrix.
		OUT translation, PN_Vector, #Absolute translation of the matrix
	}
	PURE GetUp, SHARED
	{
		DESC Gets the up direction of the matrix.
		OUT up, PN_Vector, #The up direction of the matrix.
	}
	FUNC Identity, SHARED
	{
		DESC Initializes the matrix as Identity matrix.
	}
	FUNC Invert, SHARED
	{
		DESC Inverts the matrix.
		OUT success, PN_Bool, #Whether the matrix was inverted or not
	}
	FUNC InvertTR, SHARED
	{
		DESC Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
	}
	PURE IsIdentity, SHARED
	{
		DESC Returns whether the matrix is equal to Identity matrix or not.
		OUT identity, PN_Bool, #Is the matrix an Identity matrix or not
	}
	PURE IsRotationMatrix, SHARED
	{
		DESC Returns whether the matrix is a rotation matrix or not.
		OUT rotation, PN_Bool, #Is the matrix a rotation matrix or not
	}
	PURE IsZero, SHARED
	{
		DESC Checks whenever all fields of the matrix are 0, aka if this is a null matrix.
		OUT zero, PN_Bool, #If the matrix is a null matrix.
	}
	FUNC Rotate, SHARED
	{
		DESC Rotates the matrix by the given angle.
		IN rotation, PN_Angles, #Rotation.
	}
	FUNC Scale, SHARED
	{
		DESC Scales the matrix by the given vector.
		IN scale, PN_Vector, #Vector to scale with matrix with.
	}
	FUNC ScaleTranslation, SHARED
	{
		DESC Scales the absolute translation with the given value.
		IN scale, PN_Number, #Value to scale the translation with.
	}
	FUNC Set, SHARED
	{
		DESC Copies values from the given matrix object.
		IN src, PN_Ref, PNF_None, VMatrix, #The matrix to copy values from.
	}
	FUNC SetAngles, SHARED
	{
		DESC Sets the absolute rotation of the matrix.
		IN angle, PN_Angles, #New angles.
	}
	FUNC SetField, SHARED
	{
		DESC Sets a specific field in the matrix.
		IN row, PN_Number, #Row of the field to be set, from 1 to 4
		IN column, PN_Number, #Column of the field to be set, from 1 to 4
		IN value, PN_Number, #The value to set in that field
	}
	FUNC SetForward, SHARED
	{
		DESC Sets the forward direction of the matrix.
		IN forward, PN_Vector, #The forward direction of the matrix.
	}
	FUNC SetRight, SHARED
	{
		DESC Sets the right direction of the matrix.
		IN forward, PN_Vector, #The right direction of the matrix.
	}
	FUNC SetScale, SHARED
	{
		DESC Modifies the scale of the matrix while preserving the rotation and translation.
		IN scale, PN_Vector, #The scale to set.
	}
	FUNC SetTranslation, SHARED
	{
		DESC Sets the absolute translation of the matrix.
		IN translation, PN_Vector, #New translation.
	}
	FUNC SetUnpacked, SHARED
	{
		DESC Sets each component of the matrix.
		IN e11, PN_Number
		IN e12, PN_Number
		IN e13, PN_Number
		IN e14, PN_Number
		IN e21, PN_Number
		IN e22, PN_Number
		IN e23, PN_Number
		IN e24, PN_Number
		IN e31, PN_Number
		IN e32, PN_Number
		IN e33, PN_Number
		IN e34, PN_Number
		IN e41, PN_Number
		IN e42, PN_Number
		IN e43, PN_Number
		IN e44, PN_Number
	}
	FUNC SetUp, SHARED
	{
		DESC Sets the up direction of the matrix.
		IN forward, PN_Vector, #The up direction of the matrix.
	}
	FUNC Translate, SHARED
	{
		DESC Translates the matrix by the given vector aka. adds the vector to the translation.
		IN translation, PN_Vector, #Vector to translate the matrix by.
	}
	PURE Unpack, SHARED
	{
		DESC Returns each component of the matrix, expanding rows before columns.
		OUT e11, PN_Number, #VMatrix:GetField(1, 1)
		OUT e12, PN_Number, #VMatrix:GetField(1, 2)
		OUT e13, PN_Number, #VMatrix:GetField(1, 3)
		OUT e14, PN_Number, #VMatrix:GetField(1, 4)
		OUT e21, PN_Number, #VMatrix:GetField(2, 1)
		OUT e22, PN_Number, #VMatrix:GetField(2, 2)
		OUT e23, PN_Number, #VMatrix:GetField(2, 3)
		OUT e24, PN_Number, #VMatrix:GetField(2, 4)
		OUT e31, PN_Number, #VMatrix:GetField(3, 1)
		OUT e32, PN_Number, #VMatrix:GetField(3, 2)
		OUT e33, PN_Number, #VMatrix:GetField(3, 3)
		OUT e34, PN_Number, #VMatrix:GetField(3, 4)
		OUT e41, PN_Number, #VMatrix:GetField(4, 1)
		OUT e42, PN_Number, #VMatrix:GetField(4, 2)
		OUT e43, PN_Number, #VMatrix:GetField(4, 3)
		OUT e44, PN_Number, #VMatrix:GetField(4, 4)
		COMPACT false
	}
	FUNC Zero, SHARED
	{
		DESC Sets all components of the matrix to 0, also known as a null matrix.
	}
	PURE Transform, SHARED
	{
		DESC Transforms the input vector by this matrix, excluding position
		IN vector, PN_Vector, #Vector to transform
		IN w=1, PN_Number, #W component
		OUT out, PN_Vector, #Transformed vector
		LOCAL mv
		CODE
		{
			%mv = $1:ToTable()
			#1 = Vector(
			%mv[1][1] * $2[1] + %mv[1][2] * $2[2] + %mv[1][3] * $2[3] + %mv[1][4] * $3,
			%mv[2][1] * $2[1] + %mv[2][2] * $2[2] + %mv[2][3] * $2[3] + %mv[2][4] * $3,
			%mv[3][1] * $2[1] + %mv[3][2] * $2[2] + %mv[3][3] * $2[3] + %mv[3][4] * $3
			)
		}
	}
	PURE TransformPosition, SHARED
	{
		DESC Transforms the input vector by this matrix, including position
		IN position, PN_Vector, #Vector to transform
		OUT out, PN_Vector, #Transformed vector
		CODE #1 = $1 * $2
	}
	PURE TransformNormal, SHARED
	{
		DESC Transforms the input vector by this matrix, excluding position
		IN position, PN_Vector, #Vector to transform
		OUT out, PN_Vector, #Transformed vector
		LOCAL mv
		CODE
		{
			%mv = $1:ToTable()
			#1 = Vector(
			%mv[1][1] * $2[1] + %mv[1][2] * $2[2] + %mv[1][3] * $2[3],
			%mv[2][1] * $2[1] + %mv[2][2] * $2[2] + %mv[2][3] * $2[3],
			%mv[3][1] * $2[1] + %mv[3][2] * $2[2] + %mv[3][3] * $2[3]
			)
		}
	}
}