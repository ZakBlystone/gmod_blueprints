CLASS Weapon
{
	PURE AllowsAutoSwitchFrom, SHARED
	{
		DESC Returns whether the weapon allows to being switched from when a better ( Weapon:GetWeight ) weapon is being picked up.
		OUT allowed, PN_Bool, #Whether the weapon allows to being switched from.
	}
	PURE AllowsAutoSwitchTo, SHARED
	{
		DESC Returns whether the weapon allows to being switched to when a better ( Weapon:GetWeight ) weapon is being picked up.
		OUT allowed, PN_Bool, #Whether the weapon allows to being switched to.
	}
	FUNC CallOnClient, SHARED
	{
		DESC Calls a SWEP function on client.
		IN functionName, PN_String, #Name of function to call. If you want to call SWEP:MyFunc() on client, you type in "MyFunc"
		IN arguments, PN_String, PNF_Nullable, #Arguments for the function, separated by spaces. NOTE	 Only the second argument is passed as argument and must be a string
	}
	PURE Clip1, SHARED
	{
		DESC Returns how much primary ammo is in the magazine.
		OUT clip, PN_Number, #The amount of primary ammo in the magazine.
	}
	PURE Clip2, SHARED
	{
		DESC Returns how much secondary ammo is in magazine.
		OUT clip, PN_Number, #The amount of secondary ammo in the magazine.
	}
	FUNC DefaultReload, SHARED
	{
		DESC Forces the weapon to reload while playing given animation.
		IN act, PN_Enum, PNF_None, ACT, #Sequence to use as reload animation. Uses the ACT_ Enums.
		OUT reloaded, PN_Bool, #Did reloading actually take place
	}
	PURE GetActivity, SHARED
	{
		DESC Returns the sequence enumeration number that the weapon is playing.
		OUT act, PN_Enum, PNF_None, ACT, #Current activity, see ACT_ Enums. Returns 0 if the weapon doesn't have active sequence.
	}
	PURE GetHoldType, SHARED
	{
		DESC Returns the hold type of the weapon.
		OUT type, PN_String, #The hold type of the weapon. You can find a list of default hold types here.
	}
	PURE GetMaxClip1, SHARED
	{
		DESC Returns maximum primary clip size
		OUT maxClip, PN_Number, #Maximum primary clip size
	}
	PURE GetMaxClip2, SHARED
	{
		DESC Returns maximum secondary clip size
		OUT maxClip, PN_Number, #Maximum secondary clip size
	}
	PURE GetNextPrimaryFire, SHARED
	{
		DESC Gets the next time the weapon can primary fire. ( Can call WEAPON:PrimaryAttack )
		OUT time, PN_Number, #The time, relative to CurTime
	}
	PURE GetNextSecondaryFire, SHARED
	{
		DESC Gets the next time the weapon can secondary fire. ( Can call WEAPON:SecondaryAttack )
		OUT time, PN_Number, #The time, relative to CurTime
	}
	PURE GetPrimaryAmmoType, SHARED
	{
		DESC Gets the primary ammo type of the given weapon.
		OUT ammoID, PN_Number, #The ammo type ID, or -1 if not found.
	}
	PURE GetPrintName, SHARED
	{
		DESC Returns the non-internal name of the weapon, that should be for displaying.
		OUT name, PN_String, #The "nice" name of the weapon.
	}
	PURE GetSecondaryAmmoType, SHARED
	{
		DESC Gets the ammo type of the given weapons secondary fire.
		OUT ammoID, PN_Number, #The secondary ammo type ID, or -1 if not found.
	}
	PURE GetSlot, SHARED
	{
		DESC Returns the slot of the weapon (slot numbers start from 0)
		OUT slot, PN_Number, #The slot of the weapon
	}
	PURE GetSlotPos, SHARED
	{
		DESC Returns slot position of the weapon
		OUT slotPos, PN_Number, #The slot position of the weapon
	}
	PURE GetWeaponViewModel, SHARED
	{
		DESC Returns the view model of the weapon.
		OUT viewModel, PN_String, #The view model of the weapon.
	}
	PURE GetWeaponWorldModel, SHARED
	{
		DESC Returns the world model of the weapon.
		OUT worldModel, PN_String, #The world model of the weapon.
	}
	PURE GetWeight, SHARED
	{
		DESC Returns the "weight" of the weapon, which is used when deciding which Weapon is better by the engine.
		OUT weight, PN_Number, #The weapon "weight".
	}
	PURE HasAmmo, SHARED
	{
		DESC Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine and when there's no reserve ammo left.
		OUT hasAmmo, PN_Bool, #Whether the weapon has ammo or not.
	}
	PURE IsCarriedByLocalPlayer, CLIENT
	{
		DESC Returns whenever the weapon is carried by the local player.
		OUT carried, PN_Bool, #Is the weapon is carried by the local player or not
	}
	PURE IsScripted, SHARED
	{
		DESC Checks if the weapon is a SWEP or a built-in weapon.
		OUT scripted, PN_Bool, #Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2 weapon )
	}
	PURE IsWeaponVisible, SHARED
	{
		DESC Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.
		OUT visible, PN_Bool, #Is visible or not
	}
	PURE LastShootTime, SHARED
	{
		DESC Returns the time since this weapon last fired a bullet with Entity:FireBullets in seconds. It is not networked.
		OUT time, PN_Number, #The time in seconds when the last bullet was fired.
	}
	FUNC SendWeaponAnim, SHARED
	{
		DESC Forces weapon to play activity/animation.
		IN act, PN_Enum, PNF_None, ACT, #Activity to play. See the ACT_ Enums (specifically ACT_VM_).
	}
	FUNC SetClip1, SHARED
	{
		DESC Lets you change the number of bullets in the given weapons primary clip.
		IN clip, PN_Number, #The amount of bullets the clip should contain
	}
	FUNC SetClip2, SHARED
	{
		DESC Lets you change the number of bullets in the given weapons secondary clip.
		IN clip, PN_Number, #The amount of bullets the clip should contain
	}
	FUNC SetHoldType, SHARED
	{
		DESC Sets the hold type of the weapon. This function also calls WEAPON:SetWeaponHoldType and properly networks it to all clients.
		IN name, PN_String, #Name of the hold type. You can find all default hold types here
	}
	FUNC SetLastShootTime, SHARED
	{
		DESC Sets the time since this weapon last fired in seconds. Used in conjunction with Weapon:LastShootTime
		IN time, PN_Number, PNF_Nullable, #The time in seconds when the last time the weapon was fired.
	}
	FUNC SetNextPrimaryFire, SHARED
	{
		DESC Sets when the weapon can fire again. Time should be based on CurTime.
		IN time, PN_Number, #Time when player should be able to use primary fire again
	}
	FUNC SetNextSecondaryFire, SHARED
	{
		DESC Sets when the weapon can alt-fire again. Time should be based on CurTime.
		IN time, PN_Number, #Time when player should be able to use secondary fire again
	}
	FUNC PrintWeaponInfo, CLIENT
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC A convenience function that draws the weapon info box, used in WEAPON:DrawWeaponSelection.
		IN x, PN_Number
		IN y, PN_Number
		IN alpha, PN_Number
	}
	FUNC ShootBullet, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC A convenience function to shoot bullets.
		IN damage, PN_Number
		IN numBullets, PN_Number, #Number of bullets to shoot
		IN aimcone, PN_Number, #Spread
		IN ammoType, PN_String, PNF_Nullable
		IN force=1, PN_Number
		IN tracer=5, PN_Number, #Show a tracer on every x bullets
	}
	FUNC ShootEffects, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC A convenience function to create shoot effects.
	}
	FUNC TakePrimaryAmmo, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC A convenience function to remove primary ammo from clip.
		IN amount, PN_Number, #Amount of primary ammo to remove
	}
	FUNC TakeSecondaryAmmo, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC A convenience function to remove primary ammo from clip.
		IN amount, PN_Number, #Amount of primary ammo to remove
	}
	FUNC SetDeploySpeed, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC Sets the weapon deploy speed. This value needs to match on client and server.
		IN speed, PN_Number
	}
	FUNC CanPrimaryAttack, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC Helper function for checking for no ammo.
		OUT canAttack, PN_Bool
	}
	FUNC CanSecondaryAttack, SHARED
	{
		MODTYPE SWEP
		DIRECTCALL
		DESC Helper function for checking for no ammo.
		OUT canAttack, PN_Bool
	}
}