CALLBACK VOID
{
	
}
STRUCT ColorModifyParams
{
	NAME $pp_colour_addr, addRed
	NAME $pp_colour_addg, addGreen
	NAME $pp_colour_addb, addBlue
	NAME $pp_colour_brightness, brightness
	NAME $pp_colour_contrast, contrast
	NAME $pp_colour_colour, color
	NAME $pp_colour_mulr, multiplyRed
	NAME $pp_colour_mulg, multiplyGreen
	NAME $pp_colour_mulb, multiplyBlue
	PIN $pp_colour_addr=0, PN_Number,
	PIN $pp_colour_addg=0, PN_Number,
	PIN $pp_colour_addb=0, PN_Number,
	PIN $pp_colour_brightness=0, PN_Number,
	PIN $pp_colour_contrast=1, PN_Number,
	PIN $pp_colour_colour=1, PN_Number,
	PIN $pp_colour_mulr=0, PN_Number,
	PIN $pp_colour_mulg=0, PN_Number,
	PIN $pp_colour_mulb=0, PN_Number,
}
STRUCT TeamInfo
{
	PIN Color, PN_Color, PNF_None, #Team color
	PIN Joinable, PN_Bool
	PIN Name, PN_String
	PIN Score, PN_Number
}
STRUCT RenderModelSettings
{
	PIN model, PN_String, #Model to draw
	PIN pos, PN_Vector, #Position to draw the model at
	PIN angle, PN_Angles, #Angles to draw the model at
}
STRUCT TranslateHandsResult
{
	DESC For use with player_manager.TranslatePlayerHands
	PIN model, PN_String, #Model of hands
	PIN skin, PN_Number, #Skin of hands
	PIN body, PN_String, #Bodygroups of hands
}
STRUCT ParticleAttachment
{
	DESC For use with Entity:CreateParticleSystem
	PIN attachtype=PATTACH_ABSORIGIN, PN_Enum, PNF_Nullable, PATTACH, #The particle attach type
	PIN entity, PN_Ref, PNF_Nullable, Entity, #The parent entity
	PIN position, PN_Vector, PNF_Nullable, #The offset position
}
STRUCT AnimInfo
{
	DESC For use with Entity:GetAnimInfo
	PIN flags=0, PN_Number, #Animation flags
	PIN fps=0, PN_Number, #Frame rate
	PIN label, PN_String, #Name of animation
	PIN numframes=0, PN_Number, #Number of frames in the animation
}
STRUCT SubModel
{
	DESC For use with Entity:GetSubModels
	PIN name, PN_String, #Name of submodel
	PIN id, PN_Number, #ID of submodel
}
STRUCT Convex
{
	DESC For use with Entity:PhysicsInitConvex and Entity:PhysicsInitMultiConvex
	PIN vertices, PN_Vector, PNF_Table, #Vertices for convex mesh
}
STRUCT NavExtent
{
	DESC For use with CNavArea:GetExtentInfo
	Vector hi Vector lo number SizeX number SizeY number SizeZ
	PIN hi, PN_Vector
	PIN lo, PN_Vector
	PIN SizeX, PN_Number
	PIN SizeY, PN_Number
	PIN SizeZ, PN_Number
}
STRUCT VectorDist
{
	DESC For use with NextBot:FindSpots
	PIN vector, PN_Vector
	PIN distance, PN_Number	
}
STRUCT CursorData
{
	DESC For use with PathFollower:GetCursorData
	PIN curvature, PN_Number
	PIN forward, PN_Vector
	PIN pos, PN_Vector
}
STRUCT ShadowParams
{
	DESC For use with PhysObj:ComputeShadowControl
	NAME secondstoarrive, secondsToArrive
	NAME angle, angles
	NAME maxangular, maxAngular
	NAME maxangulardamp, maxAngularDamp
	NAME maxspeed, maxSpeed
	NAME maxspeeddamp, maxSpeedDamp
	NAME dampfactor, dampFactor
	NAME teleportdistance, teleportDistance
	NAME deltatime, deltaTime
	PIN secondstoarrive=1, PN_Number, #How long it takes to move to pos and rotate accordingly
	PIN pos, PN_Vector, #Where you want to move to
	PIN angle, PN_Angles, #Angle you want to move to
	PIN maxangular=5000, PN_Number, #What should be the maximal angular force applied
	PIN maxangulardamp=10000, PN_Number, #At which force/speed should it start damping the rotation
	PIN maxspeed=1000000, PN_Number, #Maximal linear force applied
	PIN maxspeeddamp=10000, PN_Number, #Maximal linear force/speed before damping
	PIN dampfactor=0.8, PN_Number, #The percentage it should damp the linear/angular force if it reaches it's max amount
	PIN teleportdistance=200, PN_Number, #If it's further away than this it'll teleport ( Set to 0 to not teleport )
	PIN deltatime, PN_Number, #The deltatime it should use
}
STRUCT DuplicatorData
{
	DESC For use with duplicator.Copy
	PIN Entities, PN_Ref, PNF_Table, Entity
	PIN Constraints, PN_Ref, PNF_Table, Entity
	PIN Mins, PN_Vector
	PIN Maxs, PN_Vector
}
STRUCT AddonInfo
{
	DESC For use with engine.GetAddons
	PIN downloaded, PN_Bool
	PIN models, PN_Number
	PIN title, PN_String
	PIN file, PN_String
	PIN mounted, PN_Bool
	PIN wsid, PN_Number
}
STRUCT GamemodeInfo
{
	DESC For use with engine.GetGamemodes
	NAME workshopid, workshopID
	NAME menusystem, menuSystem
	PIN title, PN_String
	PIN workshopid, PN_Number
	PIN menusystem, PN_Bool
	PIN maps, PN_String
	PIN name, PN_String
}
STRUCT GameInfo
{
	DESC For use with engine.GetGames
	PIN depot, PN_Number
	PIN title, PN_String
	PIN owned, PN_Bool
	PIN folder, PN_String
	PIN mounted, PN_Bool
	PIN installed, PN_Bool
}
STRUCT AmmoData
{
	DESC Table structure that describes a Source Engine ammo type.
	NAME dmgtype, damageType
	NAME maxsplash, maxSplash
	NAME minsplash, minSplash
	NAME npcdmg, npcDamage
	NAME plydmg, playerDamage
	NAME maxcarry, maxCarry
	PIN dmgtype=DMG_BULLET, PN_Enum, PNF_None, DMG, #Damage type using DMG_ Enums.
	PIN force=1000, PN_Number, #The force of the ammo.
	PIN maxsplash=0, PN_Number, #The maximum water splash size
	PIN minsplash=0, PN_Number, #The minimum water splash size
	PIN name, PN_String, #Name of the ammo
	PIN npcdmg=10, PN_Number, #The damage dealt to NPCs
	PIN plydmg=10, PN_Number, #The damage dealt to players
	PIN tracer=TRACER_NONE, PN_Enum, PNF_None, TRACER, #Tracer type
	PIN maxcarry=9999, PN_Number, #Maximum amount of ammo of this type the player should be able to carry in reserve.
	PIN flags=0, PN_Enum, PNF_Bitfield, AMMO, #Flags for the ammo type
}
STRUCT AngPos
{
	DESC Table used by various functions, such as Entity:GetAttachment.
	NAME Ang, angle
	NAME Pos, pos
	PIN Ang, PN_Angles, #Angle
	PIN Pos, PN_Vector, #Position
}
STRUCT AnimationData
{
	
}
STRUCT AttachmentData
{
	DESC Table returned by Entity:GetAttachments.
	PIN id, PN_Number, #Index of the attachment
	PIN name, PN_String, #Name of the attachment
}
STRUCT BodyGroupData
{
	DESC Table returned by Entity:GetBodyGroups.
	PIN id, PN_Number, #Index of the body group
	PIN name, PN_String, #Name of the body group
	PIN num, PN_Number, #Amount of subgroups
}
STRUCT BoneManipulationData
{
	DESC Structure used for storing/restoring bone manipulations.
	NAME s, scale
	NAME a, angles
	NAME p, pos
	PIN s, PN_Vector, PNF_Nullable, #The entity's scale manipulation of the bone
	PIN a, PN_Angles, PNF_Nullable, #The entity's angle manipulation of the bone
	PIN p, PN_Vector, PNF_Nullable, #The entity's position manipulation of the given bone
}
CALLBACK FuncBulletCallback
{
	IN attacker, PN_Ref, PNF_None, Entity
	IN trace, PN_Struct, PNF_None, TraceResult
	IN damageInfo, PN_Ref, PNF_None, CTakeDamageInfo
}
STRUCT Bullet
{
	PIN Attacker, PN_Ref, PNF_Nullable, Entity, #The entity that should be reported as attacker eg. a player
	PIN Callback, PN_Func, PNF_Nullable, FuncBulletCallback, #Function to be called after the bullet was fired.
	PIN Damage=1, PN_Number, #The damage dealt by the bullet
	PIN Force=1, PN_Number, #The force of the bullets
	PIN Distance=56756, PN_Number, #Maximum distance the bullet can travel
	PIN HullSize=0, PN_Number, #The hull size of the bullet
	PIN Num=1, PN_Number, #The amount of bullets to fire
	PIN Tracer=1, PN_Number, #Show tracer for every x bullets
	PIN AmmoType, PN_String, #The ammunition name
	PIN TracerName, PN_String, #The tracer name.
	PIN Dir, PN_Vector, PNF_Nullable, #The fire direction
	PIN Spread, PN_Vector, PNF_Nullable, #The spread, only x and y are needed
	PIN Src, PN_Vector, PNF_Nullable, #The position to fire the bullets from
	PIN IgnoreEntity, PN_Ref, PNF_Nullable, Entity, #The entity that the bullet will ignore when it will be shot.
}
STRUCT CamDataOrtho
{
	DESC For use with CamData
	PIN left, PN_Number
	PIN right, PN_Number
	PIN top, PN_Number
	PIN bottom, PN_Number
}
STRUCT CamData
{
	DESC Table structure used GM:CalcView and GM:CalcVehicleView hook.
	NAME znear, zNear
	NAME zfar, zFar
	NAME drawviewer, drawViewer
	PIN origin, PN_Vector, #The camera's position
	PIN angles, PN_Angles, #The camera's angles
	PIN fov, PN_Number, #The camera's FOV
	PIN znear, PN_Number, #Distance to near clipping plane
	PIN zfar, PN_Number, #Distance to far clipping plane
	PIN drawviewer=false, PN_Bool, #Set true to draw local players player model.
	PIN ortho, PN_Struct, PNF_Nullable, CamDataOrtho
}
STRUCT CollisionData
{
	DESC Passed as argument of ENTITY:PhysicsCollide.
	PIN HitPos, PN_Vector, #The collision position
	PIN HitEntity, PN_Ref, PNF_None, Entity, #The other collision entity
	PIN OurOldVelocity, PN_Vector, #The entity's velocity before the collision
	PIN HitObject, PN_Ref, PNF_None, PhysObj, #Other entity's physics object
	PIN DeltaTime, PN_Number, #Time since the last collision with this HitEntity
	PIN TheirOldVelocity, PN_Vector, #Speed of the other entity before the collision
	PIN Speed, PN_Number, #The speed of the entity before the collision
	PIN HitNormal, PN_Vector, #Normal of the surface that hit the other entity
	PIN PhysObject, PN_Ref, PNF_None, PhysObj, #Entity's physics object
}
STRUCT Color, PN_Color
{
	METATABLE Color
	PIN r=255, PN_Number, #An integer from 0-255 describing the red value of the color.
	PIN g=255, PN_Number, #An integer from 0-255 describing the green value of the color.
	PIN b=255, PN_Number, #An integer from 0-255 describing the blue value of the color.
	PIN a=255, PN_Number, PNF_Nullable, #An integer from 0-255 describing the alpha (transparency) of the color.
}
CALLBACK ContentConstructor
{
	IN panel, PN_Ref, PNF_None, Panel, #The container/parent of the new panel
	IN data, PN_Any, PNF_Table, #Data for the content type passed from spawnmenu.CreateContentIcon
}
STRUCT CreationMenus
{
	PIN Function, PN_Func, PNF_None, ContentConstructor, #The function used to generate the content of the tab.
	PIN Icon, PN_String, #The icon material that will accompany the title of the tab.
	PIN Order, PN_Number, #The order in which a tab will be displayed relative to the other tabs.
	PIN Tooltip, PN_String, #The tooltip to be shown with the tab.
}
STRUCT DateData
{
	DESC Table returned by os.date and used by os.time.
	PIN day, PN_Number, #Day of the month
	PIN hour, PN_Number, #Hour
	PIN isdst, PN_Bool, #Daylight saving enabled
	PIN min, PN_Number, #Minute
	PIN month, PN_Number, #Month January: 1, December: 12
	PIN sec, PN_Number, #Second
	PIN wday, PN_Number, #Day of the week Sunday: 1, Saturday: 7
	PIN yday, PN_Number, #Day of the year
	PIN year, PN_Number, #Year
}
STRUCT EmitSoundInfo
{
	DESC Passed as argument of GM:EntityEmitSound.
	NAME SoundName, name
	NAME OriginalSoundName, original
	NAME SoundTime, time
	NAME SoundLevel, level
	PIN SoundName, PN_String, #The file path of the played sound.
	PIN OriginalSoundName, PN_String, #The original file path or soundscript name.
	PIN SoundTime=0, PN_Number, #The time at which the sound should be played.
	PIN DSP=0, PN_Number, #The DSP (digital signal processing) preset applied to the sound.
	PIN SoundLevel=SNDLVL_NORM, PN_Enum, PNF_None, SNDLVL, #The sound's attenuation
	PIN Pitch=100, PN_Number, #The pitch of the played sound
	PIN Flags=0, PN_Enum, PNF_Bitfield, SND, #The bit flags of the played sound
	PIN Channel=CHAN_AUTO, PN_Enum, PNF_None, CHAN, #The sound's channel.
	PIN Volume=1, PN_Number, #The volume of the played sound
	PIN Entity, PN_Ref, PNF_Nullable, Entity, #The entity that played the sound.
	PIN Pos, PN_Vector, PNF_Nullable, #The origin of the played sound.
}
STRUCT ENT
{
	DESC Information about the ENT structure.
	PIN Base, PN_String, #The base entity to derive from. This must be a valid Lua entity
	PIN Type, PN_String, #Type of the entity. This must be one of these: anim, brush, point, ai, nextbot, filter
	PIN ClassName, PN_String, #Entity class name of the entity (File or folder name of your entity). This is set automatically after the entity file is loaded.
	PIN Folder, PN_String, #The folder from where the entity was loaded. This should always be "entity/ent_myentity", regardless whether your entity is stored as a file, or multiple files in a folder. This is set automatically before the entity file is loaded.
	PIN AutomaticFrameAdvance, PN_Bool, #(Clientside) Set this to true if your entity has animations. You should also apply changes to the ENTITY:Think function from the example on that page.
	PIN Category=Other, PN_String, #(Clientside) Spawnmenu category to put the entity into
	PIN Spawnable, PN_Bool, #Whether this entity should be displayed and is spawnable in the spawn menu
	PIN Editable, PN_Bool, #Whether the entity supports Editing. See Editable Entities for more info.
	PIN AdminOnly, PN_Bool, #Whether or not only admins can spawn the entity from their spawn menu
	PIN PrintName, PN_String, #(Clientside) Nice name of the entity to appear in the spawn menu
	PIN Author, PN_String, #(Clientside) The author of the entity
	PIN Contact, PN_String, #(Clientside) The contacts of the entity creator
	PIN Purpose, PN_String, #(Clientside) The purpose of the entity creation
	PIN Instructions, PN_String, #(Clientside) How to use your entity
	PIN RenderGroup, PN_Enum, PNF_None, RENDERGROUP, #(Clientside) The entity's render group, see RENDERGROUP_ Enums.
	PIN DisableDuplicator, PN_Bool, #(Serverside) Disable the ability for players to duplicate this entity.
	PIN ScriptedEntityType=entity, PN_String, #(Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes. See spawnmenu.AddContentType for more information.
	PIN DoNotDuplicate, PN_Bool, PNF_Nullable, #(Serverside) If set, the entity will not be duplicated via the built-in duplicator system.
}
CALLBACK FuncHTTPFailed
{
	IN reason, PN_String
}
CALLBACK FuncHTTPSuccess
{
	IN code, PN_Number
	IN body, PN_String
	IN headers, PN_Any, PNF_Table
}
STRUCT HTTPRequest
{
	PIN failed, PN_Func, PNF_None, FuncHTTPFailed, #Function to be called on failure.
	PIN success, PN_Func, PNF_None, FuncHTTPSuccess, #Function to be called on success.
	PIN method, PN_String, #Request method, case insensitive.
	PIN url, PN_String, #The target url
	PIN parameters, PN_String, PNF_Table, #KeyValue table for parameters
	PIN headers, PN_String, PNF_Table, #KeyValue table for headers
	PIN body, PN_String, PNF_Nullable, #Body string for POST data.
	PIN type, PN_String, PNF_Nullable, #Content type for body.
}
STRUCT HullTrace
{
	DESC Table used by util.TraceHull.
	PIN start, PN_Vector, #The start position of the trace
	PIN endpos, PN_Vector, #The end position of the trace
	PIN mins, PN_Vector, #The 3D vector local to the start/endpos with the lowest (often negative) values. This will represent the corner with the lower bounds of the box.
	PIN maxs, PN_Vector, #The 3D vector local to the start/endpos with the highest values. This will represent the corner with the upper bounds of the box.
	PIN filter, PN_Ref, PNF_Nullable, Entity, #Things the trace should not hit
	PIN mask=MASK_SOLID, PN_Enum, PNF_Bitfield, MASK, #The trace mask MASK_ Enums. This determines what the trace should hit and what it shouldn't hit.
	PIN collisiongroup=COLLISION_GROUP_NONE, PN_Enum, PNF_None, COLLISION_GROUP, #The collision group COLLISION_GROUP_ Enums. This determines what the trace should hit in regards to the entity's collision group.
	PIN ignoreworld=false, PN_Bool, #Should the trace ignore world or not.
	PIN output, PN_Struct, PNF_Nullable, TraceResult, #If set, the trace result will be written to the supplied table instead of returning a new table
}
STRUCT LocalLight
{
	DESC Table structure used for render.SetLocalModelLights.
	PIN type=MATERIAL_LIGHT_POINT, PN_Enum, PNF_None, MATERIAL_LIGHT, #The type of the light source
	PIN color, PN_Vector, PNF_Nullable, #The color of the light source (x is red, y is green, z is blue) Values are not restricted to a specific range, higher values will result in a brighter light.
	PIN pos, PN_Vector, PNF_Nullable, #The origin of the light in world coordinates.
	PIN dir, PN_Vector, PNF_Nullable, #The direction of the light. Only required for directional and spot lights.
	PIN range, PN_Number, #The maximum range of the light source. Does not actually control light attenuation. Usually left at 0 for infinite range.
	PIN angularFalloff=5, PN_Number, #Angular falloff exponent for spot lights. Higher values result in a sharper transition between the inner cone and the outer cone.
	PIN innerAngle=45, PN_Number, #The inner cone angle for spot lights, in degrees. No angular falloff will occur inside that cone.
	PIN outerAngle=45, PN_Number, #The outer cone angle for spot lights, in degrees.
	PIN fiftyPercentDistance, PN_Number, PNF_Nullable, #The distance at which the light will fade to 50% of its brightness.
	PIN zeroPercentDistance, PN_Number, PNF_Nullable, #The distance at which the light will completely fade out.
	PIN quadraticFalloff, PN_Number, #The quadratic term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
	PIN linearFalloff, PN_Number, #The linear term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
	PIN constantFalloff=1, PN_Number, #The constant term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.
}
CALLBACK FuncMatProxyInit
{
	IN self, PN_Struct, PNF_None, MatProxy
	IN materialName, PN_String, PNF_None
	IN values, PN_String, PNF_Table
}
CALLBACK FuncMatProxyBind
{
	IN self, PN_Struct, PNF_None, MatProxy
	IN materialName, PN_String, PNF_None
	IN entity, PN_Ref, PNF_Entity
}
STRUCT MatProxyData
{
	PIN name, PN_String, #The name of the material proxy
	PIN init, PN_Func, PNF_None, FuncMatProxyInit
	PIN bind, PN_Func, PNF_None, FuncMatProxyBind
}
STRUCT MeshTangentInfo
{
	PIN tangentX, PN_Number
	PIN tangentY, PN_Number
	PIN tangentZ, PN_Number
	PIN tangentHandedness, PN_Number
}
STRUCT MeshVertex
{
	PIN color, PN_Color, PNF_None, #The vertex color
	PIN normal, PN_Vector, PNF_Nullable, #The triangles normal required to calculate lighting(optional).
	PIN tangent, PN_Vector, PNF_Nullable, #The triangles tangent. Not used by the VertexLitGeneric shader.
	PIN binormal, PN_Vector, PNF_Nullable, #The triangles binormal. Not used by the VertexLitGeneric shader.
	PIN pos, PN_Vector, #The vertex position.
	PIN u, PN_Number, #The u texture scale.
	PIN v, PN_Number, #The v texture scale.
	PIN userdata, PN_Struct, PNF_Nullable, MeshTangentInfo, #A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).
}
STRUCT PolygonVertex
{
	PIN x, PN_Number, #The x coordinate of the vertex.
	PIN y, PN_Number, #The y coordinate of the vertex.
	PIN u, PN_Number, PNF_Nullable, #The u texture coordinate of the vertex.
	PIN v, PN_Number, PNF_Nullable, #The v texture coordinate of the vertex.
}
STRUCT OperatingParams
{
	PIN RPM, PN_Number, #The current RPM of the vehicle
	PIN gear, PN_Number, #The current gear of the vehicle, starting from 0
	PIN isTorqueBoosting, PN_Bool, #Is the vehicle boosting?
	PIN speed, PN_Number, #The current speed, in inches per second
	PIN steeringAngle, PN_Number, #Steering angle
	PIN wheelsInContact, PN_Number, #Wheels on ground
}
STRUCT PathSegment
{
	DESC Structure represents a path segment, returned by PathFollower:GetCurrentGoal, PathFollower:FirstSegment and PathFollower:LastSegment.
	PIN area, PN_Ref, PNF_None, CNavArea, #The navmesh area this segment occupies.
	PIN curvature, PN_Number
	PIN distanceFromStart, PN_Number, #Distance of this segment from the start of the path.
	PIN forward, PN_Vector, #The direction of travel to reach the end of this segment from the start, represented as a normalised vector.
	PIN how, PN_Number, #The direction of travel to reach the end of this segment from the start, represented as a cardinal direction integer 0 to 3, or 9 for vertical movement.
	PIN ladder, PN_Ref, PNF_None, CNavLadder, #The navmesh ladder this segment occupies, if any.
	PIN length, PN_Number, #Length of this segment.
	PIN m_portalCenter, PN_Vector
	PIN m_portalHalfWidth, PN_Number
	PIN pos, PN_Vector, #The position of the end of this segment.
	PIN type, PN_Number, #The movement type of this segment, indicating how bots are expected to move along this segment.
}
STRUCT PhysEnvPerformanceSettings
{
	DESC Table used by physenv.SetPerformanceSettings.
	PIN LookAheadTimeObjectsVsObject, PN_Number, #Maximum amount of seconds to precalculate collisions with objects.
	PIN LookAheadTimeObjectsVsWorld, PN_Number, #Maximum amount of seconds to precalculate collisions with world.
	PIN MaxAngularVelocity, PN_Number, #Maximum rotation velocity.
	PIN MaxCollisionChecksPerTimestep, PN_Number, #Maximum collision checks per tick.
	PIN MaxCollisionsPerObjectPerTimestep, PN_Number, #Maximum collision per object per tick.
	PIN MaxFrictionMass, PN_Number, #Maximum mass of an object to be affected by friction.
	PIN MaxVelocity, PN_Number, #Maximum speed of an object.
	PIN MinFrictionMass, PN_Number, #Minimum mass of an object to be affected by friction.
}
STRUCT PhysProperties
{
	DESC Structure used by construct.SetPhysProp.
	PIN GravityToggle, PN_Bool, #Enables or disables gravity for the entity
	PIN Material, PN_String, #Sets the physics material for the entity
}
STRUCT PropertyAdd
{
	DESC TODO: Very incomplete, properties are complicated
	WARN Very incomplete
	PIN Type=simple, PN_String, #Can be set to "toggle" to make this property a toggle property.
	PIN MenuLabel, PN_String, #Label to show on opened menu.
	PIN MenuIcon, PN_String, PNF_Nullable, #Icon to show on opened menu for this item. Optional for simple properties and unused for toggle properties.
	PIN Order, PN_Number, #Where in the list should the property be positioned, relative to other properties.
	PIN PrependSpacer=false, PN_Bool, #Whether to add a spacer before this property.
}
STRUCT RenderCamData
{
	DESC Used for cam.Start.
	PIN x, PN_Number, #The x position of the view port
	PIN y, PN_Number, #The y position of the view port
	PIN w, PN_Number, #The width of the view port
	PIN h, PN_Number, #The height of the view port
	PIN type=3D, PN_String, #The type of cam. Valid types are: 2D, 3D
	PIN origin, PN_Vector, #The position to render from
	PIN angles, PN_Angles, #The angles to render from
	PIN fov=90, PN_Number, #The field of view
	PIN aspect, PN_Number, #The aspect ratio of the view port (Note that this is NOT set to w/h by default)
	PIN zfar=1000, PN_Number, #The distance to the far clipping plane
	PIN znear=1.0, PN_Number, #The distance to the near clipping plane
	PIN subrect, PN_Bool, #Set to true if this is to draw into a subrect of the larger screen.
	PIN bloomtone, PN_Bool, #m_bDoBloomAndToneMapping
	PIN offcenter, PN_Struct, CamDataOrtho
	PIN ortho, PN_Struct, CamDataOrtho
}
STRUCT RenderCaptureData
{
	DESC Used for render.Capture.
	PIN format=png, PN_String, #Format of the capture. Valid formats are: jpeg, png
	PIN x, PN_Number, #X coordinate of the capture origin
	PIN y, PN_Number, #Y coordinate of the capture origin
	PIN w, PN_Number, #Width of the capture
	PIN h, PN_Number, #Height of the capture
	PIN quality=10, PN_Number, #The quality of the capture. Affects jpeg only.
	PIN alpha=true, PN_Bool, #Set to false to capture an image with alpha channel set to fully opaque. Affects png only.
}
STRUCT SequenceInfo
{
	DESC Used by Entity:GetSequenceInfo.
	PIN label, PN_String, #Name of the sequence.
	PIN activityname, PN_String, #Name of the activity this sequence is attached to.
	PIN activity, PN_Enum, PNF_None, ACT, #The activity ID associated with this sequence.
	PIN actweight, PN_Number, #How likely this sequence is to be picked when playing an activity its attached to. -1 means this is the only sequence for that activity. (needs validation)
	PIN flags, PN_Number, #The looping and other flags of this sequence.
	PIN numevents, PN_Number, #Number of animation events this sequence has.
	PIN numblends, PN_Number
	PIN bbmin, PN_Vector, #Mins part of the bounding box for this sequence
	PIN bbmax, PN_Vector, #Maxs part of the bounding box for this sequence
	PIN fadeintime, PN_Number, #ideal cross fade in time (0.2 default)
	PIN fadeouttime, PN_Number, #ideal cross fade out time (0.2 default)
	PIN localentrynode, PN_Number, #transition node at entry
	PIN localexitnode, PN_Number, #transition node at exit
	PIN nodeflags, PN_Number, #Transition rules
	PIN lastframe, PN_Number, #Frame that should generate EndOFSequence
	PIN nextseq, PN_Number, #If non 0, the next sequence for auto advancing sequences
	PIN pose, PN_Number
	PIN cycleposeindex, PN_Number, #If non 0, index of pose parameter to be used as cycle index. This means that the sequence playback will be controlled by a pose parameter.
	PIN anims, PN_Number, PNF_Table, #A 1-based array of all animationIDs associated with this sequence. For use with Entity:GetAnimInfo.
}
STRUCT SoundData
{
	DESC Table used in sound.Add and sound.GetProperties.
	PIN channel, PN_Enum, PNF_None, CHAN, #The sound channel to play in. See CHAN_ Enums
	PIN name, PN_String, #The name of the sound.
	PIN level=75, PN_Number, #The soundlevel of the sound in dB
	PIN sound, PN_String, #The sound file to be used in this sound effect. Can be a table of sound files. Relative to "sound" directory.
	PIN volume=1, PN_Number, #The volume of the sound as a decimal between 0 and 1. Can be a table of two numbers, a minimum and a maximum value.
	PIN pitch=100, PN_Number, #The pitch of the sound. Can be a table of two numbers, a minimum and a maximum value.
}
STRUCT SunInfo
{
	DESC Returned by util.GetSunInfo.
	PIN direction, PN_Vector, #The suns direction relative to 0,0,0
	PIN obstruction, PN_Number, #Indicates how obstructed the sun is, 1 not visible, 0 fully visible
}
STRUCT ToScreenData
{
	DESC Table returned by Vector:ToScreen.
	PIN x, PN_Number, #The x coordinate on the players screen
	PIN y, PN_Number, #The y coordinate on the players screen
	PIN visible, PN_Bool, #The coordinate is not behind the player
}
STRUCT Trace
{
	DESC Table structure used for util.TraceLine.
	PIN start, PN_Vector, #The start position of the trace
	PIN endpos, PN_Vector, #The end position of the trace
	PIN filter, PN_Ref, PNF_Table|PNF_Nullable, Entity, #Things the trace should not hit.
	PIN mask=MASK_SOLID, PN_Enum, PNF_None, MASK, #This determines what the trace should hit and what it shouldn't hit.
	PIN collisiongroup=COLLISION_GROUP_NONE, PN_Enum, PNF_None, COLLISION_GROUP, #This determines what the trace should hit in regards to the entity's collision group.
	PIN ignoreworld=false, PN_Bool, #Should the trace ignore world or not
}
STRUCT TraceResult
{
	DESC Table structure used as trace result.
	PIN Entity, PN_Ref, PNF_Nullable, Entity, #The entity hit by the trace.
	PIN Fraction=1, PN_Number, #This indicates the how much of your trace length was used from 0-1
	PIN FractionLeftSolid=0, PN_Number, #Given the trace started in a solid enviroment, this will return at what distance the trace left the solid from 0-1. Doesn't work if the trace hit a non-worldspawn entity.
	PIN Hit, PN_Bool, #Indicates whether the trace hit something.
	PIN HitBox, PN_Number, #The ID of the hitbox hit by the trace.
	PIN HitGroup, PN_Enum, PNF_None, HITGROUP, #What hitgroup the trace hit (not the same as HitBox).
	PIN HitNoDraw, PN_Bool, #Indicates whenever the trace hit a no-draw brush.
	PIN HitNonWorld, PN_Bool, #Indicates whenever the trace did not hit the world.
	PIN HitNormal, PN_Vector, PNF_Nullable, #The direction of the surface that was hit as a normal vector
	PIN HitPos, PN_Vector, PNF_Nullable, #The position the trace stopped. This will be the provided endpos if the trace hit nothing.
	PIN HitSky, PN_Bool, #Indicates whenever the trace hit the sky.
	PIN HitTexture, PN_String, #The surface material (not texture) of whatever the trace hit.
	PIN HitWorld, PN_Bool, #Indicates whenever the trace hit the world.
	PIN MatType, PN_Enum, PNF_None, MAT, #the material hit by the trace.
	PIN Normal, PN_Vector, PNF_Nullable, #The direction of the trace as a normal vector.
	PIN PhysicsBone, PN_Number, #The PhysObj ID that was hit.
	PIN StartPos, PN_Vector, PNF_Nullable, #The origin of the trace. Will match the provided startpos.
	PIN SurfaceProps, PN_Number, #ID of hit surface property from scripts/surfaceproperties.txt.
	PIN StartSolid, PN_Bool, #Indicates whenever the trace started in a solid enviroment.
	PIN AllSolid, PN_Bool, #True if the entire trace is inside a solid.
	PIN SurfaceFlags, PN_Enum, PNF_Bitfield, SURF, #The surface flags of the hit surface.
	PIN DispFlags, PN_Enum, PNF_Bitfield, DISPSURF, #The displacement flags of the hit surface.
	PIN Contents, PN_Enum, PNF_Bitfield, CONTENTS, #The contents of the hit surface.
}
STRUCT Undo
{
	DESC Table structure used by undo.Do_Undo.
	PIN Owner, PN_Ref, PNF_None, Player, #The player responsible who owns the undo
	PIN Name, PN_String, #The name of the text to report to the player
	PIN Entities, PN_Ref, PNF_Table, Entity, #A table of entities to be removed by the undo
	PIN Functions, PN_Func, PNF_Table, VOID, #A table of {function_to_call, func_arg2, func_arg3}
	PIN CustomUndoText, PN_String, PNF_Nullable, #A custom undo text to show the client
}
STRUCT VehicleParamsAxle
{
	DESC The structure used by VehicleParams structure.
	PIN brakeFactor, PN_Number
	PIN offset, PN_Vector
	PIN raytraceCenterOffset, PN_Vector
	PIN raytraceOffset, PN_Vector
	PIN suspension_maxBodyForce, PN_Number
	PIN suspension_springConstant, PN_Number
	PIN suspension_springDamping, PN_Number
	PIN suspension_springDampingCompression, PN_Number
	PIN suspension_stabilizerConstant, PN_Number
	PIN torqueFactor, PN_Number
	PIN wheelOffset, PN_Vector
	PIN wheels_brakeMaterialIndex, PN_Number, #Material index of braking material of the wheels. Upon braking, the wheels will be set to this material.
	PIN wheels_damping, PN_Number
	PIN wheels_frictionScale, PN_Number
	PIN wheels_inertia, PN_Number
	PIN wheels_mass, PN_Number, #Mass of each wheel.
	PIN wheels_materialIndex, PN_Number, #Material index of the wheels by default.
	PIN wheels_radius, PN_Number, #Radius of the wheels.
	PIN wheels_rotdamping, PN_Number
	PIN wheels_skidMaterialIndex, PN_Number, #Material index of skid material of the wheels. Upon skidding ( pressing Space and sliding the vehicle ), the wheels will be set to this material.
	PIN wheels_springAdditionalLength, PN_Number
}
STRUCT VehicleParamsBody
{
	DESC The structure used by VehicleParams structure.
	PIN addGravity, PN_Number, #Additional gravity to be applied to the vehicle
	PIN counterTorqueFactor, PN_Number
	PIN keepUprightTorque, PN_Number
	PIN massCenterOverride, PN_Vector, #Mass center override
	PIN massOverride, PN_Number, #Mass override
	PIN maxAngularVelocity, PN_Number, #Maximum angular velocity
	PIN tiltForce, PN_Number
	PIN tiltForceHeight, PN_Number
}
STRUCT VehicleParamsEngine
{
	DESC The structure used by VehicleParams structure.
	PIN autobrakeSpeedFactor, PN_Number
	PIN autobrakeSpeedGain, PN_Number
	PIN axleRatio, PN_Number, #This acts as the final ratio of the gearbox. It's like a master coefficient of the gearbox.
	PIN boostDelay, PN_Number, #Amount of seconds between being able to use the boost ( by pressing Shift key by default )
	PIN boostDuration, PN_Number, #Duration of the boost in seconds
	PIN boostForce, PN_Number
	PIN boostMaxSpeed, PN_Number, #Maximum speed while boosting. WARNING: The Vehicle:SetVehicleParams function takes this in miles per hour, but Vehicle:GetVehicleParams returns this in hammer units per second! 1 MPH is roughly 17.6 HU/s.
	PIN gearCount, PN_Number, #Amount of gears this vehicle has
	PIN gearRatio, PN_Number, PNF_Table, #A table of numbers, of gear ratios. Table length is equal to "gearCount" member of this table.
	PIN horsepower, PN_Number, #The HP amount of the vehicle. This value is used to calculate the effectively applied torque, along with ratios and maxRPM.
	PIN isAutoTransmission, PN_Number, #If true, the gearbox shifts gears, if false the gearbox stays stuck to the 1st gear (gear number 0).
	PIN maxRPM, PN_Number, #Maximum RPM of the vehicle. Despite this being a maximum value, the vehicle can exceed it. WARNING: Attempts to exceed the max RPM will force the active gear ratio to be that of the 1st gear, which will provide even more torque. This is the opposite of a rev limiter. This value is only used for the calculation of the effectively applied torque.
	PIN maxRevSpeed, PN_Number, #Maximum reverse speed of the vehicle. WARNING: The Vehicle:SetVehicleParams function takes this in miles per hour, but Vehicle:GetVehicleParams returns this in hammer units per second! 1 MPH is roughly 17.6 HU/s.
	PIN maxSpeed, PN_Number, #Maximum forward going speed of the vehicle without boosting. WARNING: The Vehicle:SetVehicleParams function takes this in miles per hour, but Vehicle:GetVehicleParams returns this in hammer units per second! 1 MPH is roughly 17.6 HU/s.
	PIN shiftDownRPM, PN_Number, #Amount of RPM to automatically shift one gear down
	PIN shiftUpRPM, PN_Number, #Amount of RPM to automatically shift one gear up
	PIN throttleTime, PN_Number
	PIN torqueBoost, PN_Number
}
STRUCT VehicleParamsSteering
{
	DESC The structure used by VehicleParams structure.
	PIN boostSteeringRateFactor, PN_Number
	PIN boostSteeringRestRateFactor, PN_Number
	PIN brakeSteeringRateFactor, PN_Number
	PIN degreesBoost, PN_Number, #The maximum angle at which the vehicle can turn while boosting
	PIN degreesFast, PN_Number, #The maximum angle at which the vehicle can turn while moving at max speed and not boosting
	PIN degreesSlow, PN_Number, #The maximum angle at which the vehicle can turn while moving slowest
	PIN dustCloud, PN_Bool, #Disabled in Garry's Mod. In Half-Life 2: Episode 2 this dictates whether the vehicle should leave wheel dust effects when driving around
	PIN isSkidAllowed, PN_Bool, #Whether the vehicle is allowed to skid/drift
	PIN powerSlideAccel, PN_Number, #In Hammer Units
	PIN speedFast, PN_Number
	PIN speedSlow, PN_Number
	PIN steeringExponent, PN_Number
	PIN steeringRateFast, PN_Number
	PIN steeringRateSlow, PN_Number
	PIN steeringRestRateFast, PN_Number
	PIN steeringRestRateSlow, PN_Number
	PIN throttleSteeringRestRateFactor, PN_Number
	PIN turnThrottleReduceFast, PN_Number
	PIN turnThrottleReduceSlow, PN_Number
}
STRUCT VehicleParams
{
	DESC The structure used by Vehicle:SetVehicleParams and Vehicle:GetVehicleParams.
	PIN wheelsPerAxle, PN_Number, #Wheels per axle
	PIN axleCount, PN_Number, #Number of axles
	PIN axles, PN_Struct, PNF_Table, VehicleParamsAxle, #A table of VehicleParamsAxle structure tables.
	PIN body, PN_Struct, PNF_None, VehicleParamsBody
	PIN engine, PN_Struct, PNF_None, VehicleParamsEngine
	PIN steering, PN_Struct, PNF_None, VehicleParamsSteering
}
STRUCT VideoData
{
	DESC Table used by video.Record.
	PIN container=webm, PN_String, #The video container format.
	PIN video=theora, PN_String, #The video codec.
	PIN audio=vorbis, PN_String, #The audio codec.
	PIN quality=0, PN_Number, #The video quality
	PIN bitrate=65536, PN_Number, #The record bitrate
	PIN fps=30, PN_Number, #Frames per second
	PIN lockfps=true, PN_Bool, #Lock the frame count per second
	PIN name, PN_String, #The file name for the video
	PIN width, PN_Number, #The videos width
	PIN height, PN_Number, #The videos height
}
STRUCT ViewData
{
	DESC Table structure used for render.RenderView.
	NAME aspectratio, aspectRatio
	NAME drawhud, drawHUD
	NAME drawmonitors, drawMonitors
	NAME drawviewmodel, drawViewmodel
	NAME viewmodelfov, viewmodelFOV
	NAME znear, zNear
	NAME zfar, zFar
	NAME znearviewmodel, zNearViewmodel
	NAME zfarviewmodel, zFarViewmodel
	NAME dopostprocess, doPostProcess
	NAME bloomtone, bloomTone
	NAME offcenter, offCenter
	PIN origin, PN_Vector, #The view's original position
	PIN angles, PN_Angles, #The view's angles
	PIN aspectratio, PN_Number, #Default width divided by height
	PIN x, PN_Number, #The x position of the viewport to render in
	PIN y, PN_Number, #The y position of the viewport to render in
	PIN w, PN_Number, #The width of the viewport to render in
	PIN h, PN_Number, #The height of the viewport to render in
	PIN drawhud, PN_Bool, #Draw the HUD and call the hud painting related hooks
	PIN drawmonitors, PN_Bool, #Draw monitors
	PIN drawviewmodel=true, PN_Bool, #The weapon's viewmodel
	PIN viewmodelfov, PN_Number, PNF_Nullable, #The viewmodel's FOV
	PIN fov, PN_Number, #The main view's FOV
	PIN ortho, PN_Struct, PNF_Nullable, CamDataOrtho, #Render the view orthogonal.
	PIN znear=1.0, PN_Number, #The distance of the view's origin to the near clipping plane
	PIN zfar=1000, PN_Number, #The distance of the view's origin to the far clipping plane
	PIN znearviewmodel=1.0, PN_Number, #The distance of the view's origin to the near clipping plane for the viewmodel
	PIN zfarviewmodel=1000, PN_Number, #The distance of the view's origin to the far clipping plane for the viewmodel
	PIN dopostprocess, PN_Bool, #Currently works identically to the "bloomtone" option (it also overrides it if you set this to false).
	PIN bloomtone=true, PN_Bool, #Disables default engine bloom and pauses the "brightness changes" on HDR maps.
	PIN offcenter, PN_Struct, PNF_Nullable, CamDataOrtho, #This allows you to "zoom in" on a part of the screen
}
STRUCT FontData
{
	NAME blursize, blurSize
	NAME scanlines, scanLines
	PIN font=Arial, PN_String, #The font source. This must be the actual name of the font, not a file name.
	PIN extended=false, PN_Bool, #Allow the font to display glyphs that are outside of the Latin-1 range
	PIN size=13, PN_Number, #The font height in pixels
	PIN weight=500, PN_Number, #The font boldness
	PIN blursize=0, PN_Number, #The strength of the font blurring
	PIN scanlines=0, PN_Number, #The "scanline" interval Must be > 1 to work. This setting is per blursize per font
	PIN antialias=true, PN_Bool, #Smooth the font
	PIN underline=false, PN_Bool, #Add an underline to the font
	PIN italic=false, PN_Bool, #Make the font italic
	PIN strikeout=false, PN_Bool, #Add a strike through
	PIN symbol=false, PN_Bool, #Enables the use of symbolic fonts such as Webdings
	PIN rotary=false, PN_Bool, #Seems to add a line in the middle of each letter
	PIN shadow=false, PN_Bool, #Add shadow casting to the font
	PIN additive=false, PN_Bool, #Additive rendering
	PIN outline=false, PN_Bool, #Add a black outline to the font.
}